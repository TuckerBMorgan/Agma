use crate::rendering::ModelVertex;
pub const  g_vertex_buf32f32er_data : [f32; 108] = [
    //Top Face
    1.0f32, 1.0f32, 1.0f32,
    -1.0f32, 1.0f32, 1.0f32,
    1.0f32, 1.0f32, -1.0f32,
    -1.0f32, 1.0f32, -1.0f32,
    -1.0f32, 1.0f32, 1.0f32,
    1.0f32, 1.0f32, -1.0f32,

    //Bottom Face
    1.0f32, -1.0f32, 1.0f32,
    -1.0f32, -1.0f32, 1.0f32,
    1.0f32, -1.0f32, -1.0f32,
    -1.0f32, -1.0f32, -1.0f32,
    -1.0f32, -1.0f32, 1.0f32,
    1.0f32, -1.0f32, -1.0f32,
    
    //Front Face
    1.0f32, 1.0f32, 1.0f32,
    -1.0f32, 1.0f32, 1.0f32,
    1.0f32, -1.0f32, 1.0f32,
    -1.0f32, 1.0f32, 1.0f32,
    1.0f32, -1.0f32, 1.0f32,
    -1.0f32, -1.0f32, 1.0f32,

    //Back f32ace
    1.0f32, 1.0f32, -1.0f32,
    -1.0f32, 1.0f32, -1.0f32,
    1.0f32, -1.0f32, -1.0f32,
    -1.0f32, 1.0f32, -1.0f32,
    1.0f32, -1.0f32, -1.0f32,
    -1.0f32, -1.0f32, -1.0f32,

    //Right Face
    1.0f32, 1.0f32, 1.0f32,
    1.0f32, 1.0f32, -1.0f32,
    1.0f32, -1.0f32, 1.0f32,
    1.0f32, 1.0f32, -1.0f32,
    1.0f32, -1.0f32, 1.0f32,
    1.0f32, -1.0f32, -1.0f32,
    
    //Lef32t Face
    -1.0f32, 1.0f32, 1.0f32,
    -1.0f32, 1.0f32, -1.0f32,
    -1.0f32, -1.0f32, 1.0f32,
    -1.0f32, 1.0f32, -1.0f32,
    -1.0f32, -1.0f32, 1.0f32,
    -1.0f32, -1.0f32, -1.0f32,
];


// One color f32or each vertex. They were generated randomly.
pub const g_color_buf32f32er_data : [f32; 108] = [
    1.0,     0.0,     0.0,
    1.0,     0.0,     0.0,
    1.0,     0.0,     0.0,
    1.0,     0.0,     0.0,
    1.0,     0.0,     0.0,
    1.0,     0.0,     0.0,

    1.0,     0.5,     0.0,
    1.0,     0.5,     0.0,
    1.0,     0.5,     0.0,
    1.0,     0.5,     0.0,
    1.0,     0.5,     0.0,
    1.0,     0.5,     0.0,

    0.0,     1.0,     0.0,
    0.0,     1.0,     0.0,
    0.0,     1.0,     0.0,
    0.0,     1.0,     0.0,
    0.0,     1.0,     0.0,
    0.0,     1.0,     0.0,

    0.0,     1.0,     0.5,
    0.0,     1.0,     0.5,
    0.0,     1.0,     0.5,
    0.0,     1.0,     0.5,
    0.0,     1.0,     0.5,
    0.0,     1.0,     0.5,

    0.0,     0.0,     1.0,
    0.0,     0.0,     1.0,
    0.0,     0.0,     1.0,
    0.0,     0.0,     1.0,
    0.0,     0.0,     1.0,
    0.0,     0.0,     1.0,

    0.5,     0.0,     1.0,
    0.5,     0.0,     1.0,
    0.5,     0.0,     1.0,
    0.5,     0.0,     1.0,
    0.5,     0.0,     1.0,
    0.5,     0.0,     1.0,
];
/*
static const GLf32loat g_normal_buf32f32er_data[] = {
    0.0f32, 1.0f32, 0.0f32,
    0.0f32, 1.0f32, 0.0f32,
    0.0f32, 1.0f32, 0.0f32,
    0.0f32, 1.0f32, 0.0f32,
    0.0f32, 1.0f32, 0.0f32,
    0.0f32, 1.0f32, 0.0f32,

    0.0f32, -1.0f32, 0.0f32,
    0.0f32, -1.0f32, 0.0f32,
    0.0f32, -1.0f32, 0.0f32,
    0.0f32, -1.0f32, 0.0f32,
    0.0f32, -1.0f32, 0.0f32,
    0.0f32, -1.0f32, 0.0f32,

    0.0f32, 0.0f32, 1.0f32,
    0.0f32, 0.0f32, 1.0f32,
    0.0f32, 0.0f32, 1.0f32,
    0.0f32, 0.0f32, 1.0f32,
    0.0f32, 0.0f32, 1.0f32,
    0.0f32, 0.0f32, 1.0f32,

    0.0f32, 0.0f32, -1.0f32,
    0.0f32, 0.0f32, -1.0f32,
    0.0f32, 0.0f32, -1.0f32,
    0.0f32, 0.0f32, -1.0f32,
    0.0f32, 0.0f32, -1.0f32,
    0.0f32, 0.0f32, -1.0f32,

    1.0f32, 0.0f32, 0.0f32,
    1.0f32, 0.0f32, 0.0f32,
    1.0f32, 0.0f32, 0.0f32,
    1.0f32, 0.0f32, 0.0f32,
    1.0f32, 0.0f32, 0.0f32,
    1.0f32, 0.0f32, 0.0f32,

    -1.0f32, 0.0f32, 0.0f32,
    -1.0f32, 0.0f32, 0.0f32,
    -1.0f32, 0.0f32, 0.0f32,
    -1.0f32, 0.0f32, 0.0f32,
    -1.0f32, 0.0f32, 0.0f32,
    -1.0f32, 0.0f32, 0.0f32,

};
*/

pub fn create_cube() -> [ModelVertex;36] {
    let mut cube_data = [ModelVertex::default();36];
    for i in 0..36 {
        let offset = i * 3;
        cube_data[i].vertices = [g_vertex_buf32f32er_data[offset], g_vertex_buf32f32er_data[offset + 1], g_vertex_buf32f32er_data[offset + 2]];
        cube_data[i].vertex_color = [g_color_buf32f32er_data[offset], g_color_buf32f32er_data[offset + 1], g_color_buf32f32er_data[offset + 2]];
    }
    cube_data
}