{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0","program":"C:\\Users\\Tucker\\.rustup\\toolchains\\nightly-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","flatbuffers","--edition=2018","C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=1e85cfec82244c02","-C","extra-filename=-1e85cfec82244c02","--out-dir","c:\\Users\\Tucker\\source\\agma\\server\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\Tucker\\source\\agma\\server\\target\\rls\\debug\\deps","--extern","bitflags=c:\\Users\\Tucker\\source\\agma\\server\\target\\rls\\debug\\deps\\libbitflags-2782c434d426d8e6.rmeta","--extern","smallvec=c:\\Users\\Tucker\\source\\agma\\server\\target\\rls\\debug\\deps\\libsmallvec-b3b21802be885be8.rmeta","--extern","thiserror=c:\\Users\\Tucker\\source\\agma\\server\\target\\rls\\debug\\deps\\libthiserror-68d84378b0cbdcf0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Tucker\\.rustup/toolchains/nightly-x86_64-pc-windows-msvc"],"output":"c:\\Users\\Tucker\\source\\agma\\server\\target\\rls\\debug\\deps\\libflatbuffers-1e85cfec82244c02.rmeta"},"prelude":{"crate_id":{"name":"flatbuffers","disambiguator":[2223088135293544911,0]},"crate_root":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src","external_crates":[{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[9576234797109122769,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","num":2,"id":{"name":"core","disambiguator":[267229713070244971,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3683013900974168134,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[15143829146767998538,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[10594799546926461173,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[16477841025109482961,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8628545597881442254,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[1387985299865621046,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[10967310900533047156,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16235493736143484136,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[17010194385668190056,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[5694895782132054700,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[7011542390046250525,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","num":14,"id":{"name":"smallvec","disambiguator":[9124836406144328976,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","num":15,"id":{"name":"thiserror","disambiguator":[11384863131258489745,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","num":16,"id":{"name":"thiserror_impl","disambiguator":[10070291150641162364,0]}},{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","num":17,"id":{"name":"bitflags","disambiguator":[5917516365941265445,0]}}],"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":617,"byte_end":2237,"line_start":17,"line_end":60,"column_start":1,"column_end":21}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1561,"byte_end":1571,"line_start":44,"line_end":44,"column_start":24,"column_end":34},"alias_span":null,"name":"array_init","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1573,"byte_end":1593,"line_start":44,"line_end":44,"column_start":36,"column_end":56},"alias_span":null,"name":"emplace_scalar_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1595,"byte_end":1600,"line_start":44,"line_end":44,"column_start":58,"column_end":63},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1627,"byte_end":1644,"line_start":45,"line_end":45,"column_start":25,"column_end":42},"alias_span":null,"name":"FlatBufferBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1682,"byte_end":1695,"line_start":47,"line_end":47,"column_start":5,"column_end":18},"alias_span":null,"name":"byte_swap_f32","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1697,"byte_end":1710,"line_start":47,"line_end":47,"column_start":20,"column_end":33},"alias_span":null,"name":"byte_swap_f64","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1712,"byte_end":1726,"line_start":47,"line_end":47,"column_start":35,"column_end":49},"alias_span":null,"name":"emplace_scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1728,"byte_end":1739,"line_start":47,"line_end":47,"column_start":51,"column_end":62},"alias_span":null,"name":"read_scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1741,"byte_end":1755,"line_start":47,"line_end":47,"column_start":64,"column_end":78},"alias_span":null,"name":"read_scalar_at","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1757,"byte_end":1769,"line_start":47,"line_end":47,"column_start":80,"column_end":92},"alias_span":null,"name":"EndianScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1798,"byte_end":1804,"line_start":49,"line_end":49,"column_start":25,"column_end":31},"alias_span":null,"name":"Follow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1806,"byte_end":1817,"line_start":49,"line_end":49,"column_start":33,"column_end":44},"alias_span":null,"name":"FollowStart","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1847,"byte_end":1848,"line_start":50,"line_end":50,"column_start":28,"column_end":29},"alias_span":null,"name":"*","value":"ForwardsUOffset, SOffsetT, UOffsetT, VOffsetT, SkipSizePrefix, SIZE_UOFFSET, SIZE_SIZEPREFIX","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1871,"byte_end":1875,"line_start":51,"line_end":51,"column_start":22,"column_end":26},"alias_span":null,"name":"Push","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1900,"byte_end":1921,"line_start":52,"line_end":52,"column_start":24,"column_end":45},"alias_span":null,"name":"buffer_has_identifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1923,"byte_end":1928,"line_start":52,"line_end":52,"column_start":47,"column_end":52},"alias_span":null,"name":"Table","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1955,"byte_end":1970,"line_start":53,"line_end":53,"column_start":25,"column_end":40},"alias_span":null,"name":"follow_cast_ref","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1972,"byte_end":1987,"line_start":53,"line_end":53,"column_start":42,"column_end":57},"alias_span":null,"name":"SafeSliceAccess","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1989,"byte_end":1995,"line_start":53,"line_end":53,"column_start":59,"column_end":65},"alias_span":null,"name":"Vector","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1997,"byte_end":2007,"line_start":53,"line_end":53,"column_start":67,"column_end":77},"alias_span":null,"name":"VectorIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1156},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2041,"byte_end":2057,"line_start":55,"line_end":55,"column_start":5,"column_end":21},"alias_span":null,"name":"ErrorTraceDetail","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2059,"byte_end":2076,"line_start":55,"line_end":55,"column_start":23,"column_end":40},"alias_span":null,"name":"InvalidFlatbuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2078,"byte_end":2099,"line_start":55,"line_end":55,"column_start":42,"column_end":63},"alias_span":null,"name":"SimpleToVerifyInSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2101,"byte_end":2111,"line_start":55,"line_end":55,"column_start":65,"column_end":75},"alias_span":null,"name":"Verifiable","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2113,"byte_end":2121,"line_start":55,"line_end":55,"column_start":77,"column_end":85},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2127,"byte_end":2142,"line_start":56,"line_end":56,"column_start":5,"column_end":20},"alias_span":null,"name":"VerifierOptions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2170,"byte_end":2197,"line_start":58,"line_end":58,"column_start":24,"column_end":51},"alias_span":null,"name":"field_index_to_field_offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":17,"index":0},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2207,"byte_end":2215,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"alias_span":null,"name":"bitflags","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":2235,"byte_end":2236,"line_start":60,"line_end":60,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":617,"byte_end":2237,"line_start":17,"line_end":60,"column_start":1,"column_end":21},"name":"","qualname":"::","value":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":78},{"krate":0,"index":213},{"krate":0,"index":236},{"krate":0,"index":254},{"krate":0,"index":297},{"krate":0,"index":446},{"krate":0,"index":473},{"krate":0,"index":492},{"krate":0,"index":647},{"krate":0,"index":771},{"krate":0,"index":797},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":824},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":840},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":853},{"krate":0,"index":856},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":887},{"krate":0,"index":890},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":902},{"krate":0,"index":905}],"decl_id":null,"docs":" # FlatBuffers","sig":null,"attributes":[{"value":"/ # FlatBuffers","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":617,"byte_end":634,"line_start":17,"line_end":17,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":635,"byte_end":638,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ A library for memory-efficient serialization of data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":639,"byte_end":696,"line_start":19,"line_end":19,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":697,"byte_end":700,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This crate provides runtime support for the FlatBuffers format in the Rust programming language.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":701,"byte_end":801,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"/ To use this crate, first generate code with the `flatc` compiler, as described here: <https://google.github.io/flatbuffers/>","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":802,"byte_end":930,"line_start":22,"line_end":22,"column_start":1,"column_end":129}},{"value":"/ Then, include that code into your project.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":931,"byte_end":977,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ Finally, add this crate to your `Cargo.toml`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":978,"byte_end":1027,"line_start":24,"line_end":24,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1028,"byte_end":1031,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ At this time, Rust support is experimental, and APIs may change between minor versions.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1032,"byte_end":1123,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1124,"byte_end":1127,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ At this time, to generate Rust code, you will need the latest `master` version of `flatc`, available from here: <https://github.com/google/flatbuffers>","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1128,"byte_end":1283,"line_start":28,"line_end":28,"column_start":1,"column_end":156}},{"value":"/ (On OSX, you can install FlatBuffers from `HEAD` with the Homebrew package manager.)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\lib.rs","byte_start":1284,"byte_end":1372,"line_start":29,"line_end":29,"column_start":1,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3253,"byte_end":3258,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"Array","qualname":"::array::Array","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3747,"byte_end":3750,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<Array>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3718,"byte_end":3735,"line_start":40,"line_end":40,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3953,"byte_end":3956,"line_start":51,"line_end":51,"column_start":18,"column_end":21},"name":"len","qualname":"<Array>::len","value":"pub const fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3918,"byte_end":3935,"line_start":50,"line_end":50,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4002,"byte_end":4008,"line_start":54,"line_end":54,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Array>::as_ptr","value":"pub fn as_ptr(&Self) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4160,"byte_end":4163,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"get","qualname":"<Array>::get","value":"pub fn get(&Self, usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4131,"byte_end":4148,"line_start":60,"line_end":60,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4338,"byte_end":4342,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"iter","qualname":"<Array>::iter","value":"pub fn iter(&Self) -> VectorIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4309,"byte_end":4326,"line_start":67,"line_end":67,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":5042,"byte_end":5062,"line_start":91,"line_end":91,"column_start":8,"column_end":28},"name":"emplace_scalar_array","qualname":"::array::emplace_scalar_array","value":"pub fn emplace_scalar_array<T: EndianScalar, const N:\n                            usize>(&mut [u8], usize, &[T; ])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":5780,"byte_end":5790,"line_start":120,"line_end":120,"column_start":8,"column_end":18},"name":"array_init","qualname":"::array::array_init","value":"pub fn array_init<F, T, const N: usize>(F) -> [T; ] where F: FnMut(usize) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":5763,"byte_end":5772,"line_start":119,"line_end":119,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":940},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":7737,"byte_end":7754,"line_start":45,"line_end":45,"column_start":12,"column_end":29},"name":"FlatBufferBuilder","qualname":"::builder::FlatBufferBuilder","value":"FlatBufferBuilder {  }","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950},{"krate":0,"index":951}],"decl_id":null,"docs":" FlatBufferBuilder builds a FlatBuffer through manipulating its internal\n state. It has an owned `Vec<u8>` that grows as needed (up to the hardcoded\n limit of 2GiB, which is set by the FlatBuffers format).\n","sig":null,"attributes":[{"value":"/ FlatBufferBuilder builds a FlatBuffer through manipulating its internal","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":7472,"byte_end":7547,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ state. It has an owned `Vec<u8>` that grows as needed (up to the hardcoded","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":7548,"byte_end":7626,"line_start":42,"line_end":42,"column_start":1,"column_end":79}},{"value":"/ limit of 2GiB, which is set by the FlatBuffers format).","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":7627,"byte_end":7686,"line_start":43,"line_end":43,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8162,"byte_end":8165,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<FlatBufferBuilder>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing.\n","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8093,"byte_end":8150,"line_start":63,"line_end":63,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8301,"byte_end":8318,"line_start":68,"line_end":68,"column_start":12,"column_end":29},"name":"new_with_capacity","qualname":"<FlatBufferBuilder>::new_with_capacity","value":"pub fn new_with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated(note = \"replaced with `with_capacity`\", since = \"0.8.5\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8219,"byte_end":8289,"line_start":67,"line_end":67,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8588,"byte_end":8601,"line_start":75,"line_end":75,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<FlatBufferBuilder>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing, with a\n ready-to-use capacity of the provided size.","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing, with a","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8386,"byte_end":8450,"line_start":71,"line_end":71,"column_start":5,"column_end":69}},{"value":"/ ready-to-use capacity of the provided size.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8455,"byte_end":8502,"line_start":72,"line_end":72,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8507,"byte_end":8510,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The maximum valid value is `FLATBUFFERS_MAX_BUFFER_SIZE`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8515,"byte_end":8576,"line_start":74,"line_end":74,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8778,"byte_end":8786,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<FlatBufferBuilder>::from_vec","value":"pub fn from_vec(Vec<u8>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a FlatBufferBuilder that is ready for writing, reusing\n an existing vector.\n","sig":null,"attributes":[{"value":"/ Create a FlatBufferBuilder that is ready for writing, reusing","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8673,"byte_end":8738,"line_start":78,"line_end":78,"column_start":5,"column_end":70}},{"value":"/ an existing vector.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8743,"byte_end":8766,"line_start":79,"line_end":79,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10117,"byte_end":10122,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"name":"reset","qualname":"<FlatBufferBuilder>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the FlatBufferBuilder internal state. Use this method after a\n call to a `finish` function in order to re-use a FlatBufferBuilder.","sig":null,"attributes":[{"value":"/ Reset the FlatBufferBuilder internal state. Use this method after a","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9521,"byte_end":9592,"line_start":106,"line_end":106,"column_start":5,"column_end":76}},{"value":"/ call to a `finish` function in order to re-use a FlatBufferBuilder.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9597,"byte_end":9668,"line_start":107,"line_end":107,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9673,"byte_end":9676,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ This function is the only way to reset the `finished` state and start","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9681,"byte_end":9754,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/ again.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9759,"byte_end":9769,"line_start":110,"line_end":110,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9774,"byte_end":9777,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ If you are using a FlatBufferBuilder repeatedly, make sure to use this","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9782,"byte_end":9856,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/ function, because it re-uses the FlatBufferBuilder's existing","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9861,"byte_end":9926,"line_start":113,"line_end":113,"column_start":5,"column_end":70}},{"value":"/ heap-allocated `Vec<u8>` internal buffer. This offers significant speed","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":9931,"byte_end":10006,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/ improvements as compared to creating a new FlatBufferBuilder for every","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10011,"byte_end":10085,"line_start":115,"line_end":115,"column_start":5,"column_end":79}},{"value":"/ new object.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10090,"byte_end":10105,"line_start":116,"line_end":116,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10812,"byte_end":10820,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"collapse","qualname":"<FlatBufferBuilder>::collapse","value":"pub fn collapse(Self) -> (Vec<u8>, usize)","parent":null,"children":[],"decl_id":null,"docs":" Destroy the FlatBufferBuilder, returning its internal byte vector\n and the index into it that represents the start of valid data.\n","sig":null,"attributes":[{"value":"/ Destroy the FlatBufferBuilder, returning its internal byte vector","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10660,"byte_end":10729,"line_start":137,"line_end":137,"column_start":5,"column_end":74}},{"value":"/ and the index into it that represents the start of valid data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10734,"byte_end":10800,"line_start":138,"line_end":138,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11117,"byte_end":11121,"line_start":148,"line_end":148,"column_start":12,"column_end":16},"name":"push","qualname":"<FlatBufferBuilder>::push","value":"pub fn push<P: Push>(&mut Self, P) -> WIPOffset<P::Output>","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data.","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10896,"byte_end":10962,"line_start":143,"line_end":143,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10967,"byte_end":10970,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ This function uses traits to provide a unified API for writing","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":10975,"byte_end":11041,"line_start":145,"line_end":145,"column_start":5,"column_end":71}},{"value":"/ scalars, tables, vectors, and WIPOffsets.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11046,"byte_end":11091,"line_start":146,"line_end":146,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11096,"byte_end":11105,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11689,"byte_end":11698,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"name":"push_slot","qualname":"<FlatBufferBuilder>::push_slot","value":"pub fn push_slot<X: Push + PartialEq>(&mut Self, VOffsetT, X, X)","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data, and\n store a reference to it in the in-progress vtable. If the value matches\n the default, then this is a no-op.\n","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data, and","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11470,"byte_end":11540,"line_start":159,"line_end":159,"column_start":5,"column_end":75}},{"value":"/ store a reference to it in the in-progress vtable. If the value matches","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11545,"byte_end":11620,"line_start":160,"line_end":160,"column_start":5,"column_end":80}},{"value":"/ the default, then this is a no-op.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11625,"byte_end":11663,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11668,"byte_end":11677,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12083,"byte_end":12099,"line_start":173,"line_end":173,"column_start":12,"column_end":28},"name":"push_slot_always","qualname":"<FlatBufferBuilder>::push_slot_always","value":"pub fn push_slot_always<X: Push>(&mut Self, VOffsetT, X)","parent":null,"children":[],"decl_id":null,"docs":" Push a Push'able value onto the front of the in-progress data, and\n store a reference to it in the in-progress vtable.\n","sig":null,"attributes":[{"value":"/ Push a Push'able value onto the front of the in-progress data, and","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":11928,"byte_end":11998,"line_start":170,"line_end":170,"column_start":5,"column_end":75}},{"value":"/ store a reference to it in the in-progress vtable.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12003,"byte_end":12057,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12062,"byte_end":12071,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12455,"byte_end":12474,"line_start":182,"line_end":182,"column_start":12,"column_end":31},"name":"num_written_vtables","qualname":"<FlatBufferBuilder>::num_written_vtables","value":"pub fn num_written_vtables(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the number of vtables that have been serialized into the\n FlatBuffer. This is primarily used to check vtable deduplication.\n","sig":null,"attributes":[{"value":"/ Retrieve the number of vtables that have been serialized into the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12286,"byte_end":12355,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/ FlatBuffer. This is primarily used to check vtable deduplication.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12360,"byte_end":12429,"line_start":180,"line_end":180,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12434,"byte_end":12443,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12751,"byte_end":12762,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"start_table","qualname":"<FlatBufferBuilder>::start_table","value":"pub fn start_table(&mut Self) -> WIPOffset<TableUnfinishedWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" Start a Table write.","sig":null,"attributes":[{"value":"/ Start a Table write.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12545,"byte_end":12569,"line_start":186,"line_end":186,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12574,"byte_end":12577,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is not in a nested state.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12582,"byte_end":12636,"line_start":188,"line_end":188,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12641,"byte_end":12644,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Users probably want to use `push_slot` to add values after calling this.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12649,"byte_end":12725,"line_start":190,"line_end":190,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":12730,"byte_end":12739,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13153,"byte_end":13162,"line_start":205,"line_end":205,"column_start":12,"column_end":21},"name":"end_table","qualname":"<FlatBufferBuilder>::end_table","value":"pub fn end_table(&mut Self, WIPOffset<TableUnfinishedWIPOffset>)\n-> WIPOffset<TableFinishedWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" End a Table write.","sig":null,"attributes":[{"value":"/ End a Table write.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13042,"byte_end":13064,"line_start":201,"line_end":201,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13069,"byte_end":13072,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is in a nested state.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13077,"byte_end":13127,"line_start":203,"line_end":203,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13132,"byte_end":13141,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13787,"byte_end":13799,"line_start":227,"line_end":227,"column_start":12,"column_end":24},"name":"start_vector","qualname":"<FlatBufferBuilder>::start_vector","value":"pub fn start_vector<T: Push>(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Start a Vector write.","sig":null,"attributes":[{"value":"/ Start a Vector write.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13469,"byte_end":13494,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13499,"byte_end":13502,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is not in a nested state.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13507,"byte_end":13561,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13566,"byte_end":13569,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Most users will prefer to call `create_vector`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13574,"byte_end":13625,"line_start":223,"line_end":223,"column_start":5,"column_end":56}},{"value":"/ Speed optimizing users who choose to create vectors manually using this","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13630,"byte_end":13705,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ function will want to use `push` to add values.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13710,"byte_end":13761,"line_start":225,"line_end":225,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":13766,"byte_end":13775,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14317,"byte_end":14327,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"end_vector","qualname":"<FlatBufferBuilder>::end_vector","value":"pub fn end_vector<T: Push>(&mut Self, usize) -> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" End a Vector write.","sig":null,"attributes":[{"value":"/ End a Vector write.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14093,"byte_end":14116,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14121,"byte_end":14124,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Note that the `num_elems` parameter is the number of written items, not","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14129,"byte_end":14204,"line_start":237,"line_end":237,"column_start":5,"column_end":80}},{"value":"/ the byte count.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14209,"byte_end":14228,"line_start":238,"line_end":238,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14233,"byte_end":14236,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Asserts that the builder is in a nested state.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14241,"byte_end":14291,"line_start":240,"line_end":240,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14296,"byte_end":14305,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14597,"byte_end":14617,"line_start":250,"line_end":250,"column_start":12,"column_end":32},"name":"create_shared_string","qualname":"<FlatBufferBuilder>::create_shared_string","value":"pub fn create_shared_string<'a:'b, 'b>(&'a mut Self, &'b str)\n-> WIPOffset<&'fbb str>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":14576,"byte_end":14585,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16280,"byte_end":16293,"line_start":290,"line_end":290,"column_start":12,"column_end":25},"name":"create_string","qualname":"<FlatBufferBuilder>::create_string","value":"pub fn create_string<'a:'b, 'b>(&'a mut Self, &'b str) -> WIPOffset<&'fbb str>","parent":null,"children":[],"decl_id":null,"docs":" Create a utf8 string.","sig":null,"attributes":[{"value":"/ Create a utf8 string.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16147,"byte_end":16172,"line_start":286,"line_end":286,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16177,"byte_end":16180,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ The wire format represents this as a zero-terminated byte vector.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16185,"byte_end":16254,"line_start":288,"line_end":288,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16259,"byte_end":16268,"line_start":289,"line_end":289,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16641,"byte_end":16659,"line_start":299,"line_end":299,"column_start":12,"column_end":30},"name":"create_byte_string","qualname":"<FlatBufferBuilder>::create_byte_string","value":"pub fn create_byte_string(&mut Self, &[u8]) -> WIPOffset<&'fbb [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Create a zero-terminated byte vector.\n","sig":null,"attributes":[{"value":"/ Create a zero-terminated byte vector.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16574,"byte_end":16615,"line_start":297,"line_end":297,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":16620,"byte_end":16629,"line_start":298,"line_end":298,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17512,"byte_end":17532,"line_start":317,"line_end":317,"column_start":12,"column_end":32},"name":"create_vector_direct","qualname":"<FlatBufferBuilder>::create_vector_direct","value":"pub fn create_vector_direct<'a:'b, 'b, T: SafeSliceAccess + Push + Sized +\n                            'b>(&'a mut Self, &'b [T]) -> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector by memcpy'ing. This is much faster than calling\n `create_vector`, but the underlying type must be represented as\n little-endian on the host machine. This property is encoded in the\n type system through the SafeSliceAccess trait. The following types are\n always safe, on any platform: bool, u8, i8, and any\n FlatBuffers-generated struct.\n","sig":null,"attributes":[{"value":"/ Create a vector by memcpy'ing. This is much faster than calling","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17095,"byte_end":17162,"line_start":310,"line_end":310,"column_start":5,"column_end":72}},{"value":"/ `create_vector`, but the underlying type must be represented as","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17167,"byte_end":17234,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/ little-endian on the host machine. This property is encoded in the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17239,"byte_end":17309,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/ type system through the SafeSliceAccess trait. The following types are","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17314,"byte_end":17388,"line_start":313,"line_end":313,"column_start":5,"column_end":79}},{"value":"/ always safe, on any platform: bool, u8, i8, and any","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17393,"byte_end":17448,"line_start":314,"line_end":314,"column_start":5,"column_end":60}},{"value":"/ FlatBuffers-generated struct.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17453,"byte_end":17486,"line_start":315,"line_end":315,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":17491,"byte_end":17500,"line_start":316,"line_end":316,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":18461,"byte_end":18485,"line_start":342,"line_end":342,"column_start":12,"column_end":36},"name":"create_vector_of_strings","qualname":"<FlatBufferBuilder>::create_vector_of_strings","value":"pub fn create_vector_of_strings<'a, 'b>(&'a mut Self, &'b [&'b str])\n-> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of strings.","sig":null,"attributes":[{"value":"/ Create a vector of strings.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":18247,"byte_end":18278,"line_start":337,"line_end":337,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":18283,"byte_end":18286,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":18291,"byte_end":18364,"line_start":339,"line_end":339,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":18369,"byte_end":18435,"line_start":340,"line_end":340,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":18440,"byte_end":18449,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":19630,"byte_end":19643,"line_start":368,"line_end":368,"column_start":12,"column_end":25},"name":"create_vector","qualname":"<FlatBufferBuilder>::create_vector","value":"pub fn create_vector<'a:'b, 'b, T: Push + Copy + 'b>(&'a mut Self, &'b [T])\n-> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of Push-able objects.","sig":null,"attributes":[{"value":"/ Create a vector of Push-able objects.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":19406,"byte_end":19447,"line_start":363,"line_end":363,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":19452,"byte_end":19455,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":19460,"byte_end":19533,"line_start":365,"line_end":365,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":19538,"byte_end":19604,"line_start":366,"line_end":366,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":19609,"byte_end":19618,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20286,"byte_end":20309,"line_start":385,"line_end":385,"column_start":12,"column_end":35},"name":"create_vector_from_iter","qualname":"<FlatBufferBuilder>::create_vector_from_iter","value":"pub fn create_vector_from_iter<T: Push + Copy,\n                               impl ExactSizeIterator<Item = T> + DoubleEndedIterator: ExactSizeIterator<Item\n                               = T> +\n                               DoubleEndedIterator>(&mut Self,\n                                                    impl ExactSizeIterator<Item = T> + DoubleEndedIterator)\n-> WIPOffset<Vector>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector of Push-able objects.","sig":null,"attributes":[{"value":"/ Create a vector of Push-able objects.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20062,"byte_end":20103,"line_start":380,"line_end":380,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20108,"byte_end":20111,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ Speed-sensitive users may wish to reduce memory usage by creating the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20116,"byte_end":20189,"line_start":382,"line_end":382,"column_start":5,"column_end":78}},{"value":"/ vector manually: use `start_vector`, `push`, and `end_vector`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20194,"byte_end":20260,"line_start":383,"line_end":383,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20265,"byte_end":20274,"line_start":384,"line_end":384,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21074,"byte_end":21088,"line_start":406,"line_end":406,"column_start":12,"column_end":26},"name":"force_defaults","qualname":"<FlatBufferBuilder>::force_defaults","value":"pub fn force_defaults(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Set whether default values are stored.","sig":null,"attributes":[{"value":"/ Set whether default values are stored.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20758,"byte_end":20800,"line_start":398,"line_end":398,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20805,"byte_end":20808,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ In order to save space, fields that are set to their default value","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20813,"byte_end":20883,"line_start":400,"line_end":400,"column_start":5,"column_end":75}},{"value":"/ aren't stored in the buffer. Setting `force_defaults` to `true`","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20888,"byte_end":20955,"line_start":401,"line_end":401,"column_start":5,"column_end":72}},{"value":"/ disables this optimization.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20960,"byte_end":20991,"line_start":402,"line_end":402,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":20996,"byte_end":20999,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ By default, `force_defaults` is `false`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21004,"byte_end":21048,"line_start":404,"line_end":404,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21053,"byte_end":21062,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21317,"byte_end":21332,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"unfinished_data","qualname":"<FlatBufferBuilder>::unfinished_data","value":"pub fn unfinished_data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte slice for the data that has been written, regardless of\n whether it has been finished.\n","sig":null,"attributes":[{"value":"/ Get the byte slice for the data that has been written, regardless of","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21181,"byte_end":21253,"line_start":410,"line_end":410,"column_start":5,"column_end":77}},{"value":"/ whether it has been finished.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21258,"byte_end":21291,"line_start":411,"line_end":411,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21296,"byte_end":21305,"line_start":412,"line_end":412,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21599,"byte_end":21612,"line_start":421,"line_end":421,"column_start":12,"column_end":25},"name":"finished_data","qualname":"<FlatBufferBuilder>::finished_data","value":"pub fn finished_data(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the byte slice for the data that has been written after a call to\n one of the `finish` functions.\n # Panics\n Panics if the buffer is not finished.\n","sig":null,"attributes":[{"value":"/ Get the byte slice for the data that has been written after a call to","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21398,"byte_end":21471,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ one of the `finish` functions.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21476,"byte_end":21510,"line_start":417,"line_end":417,"column_start":5,"column_end":39}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21515,"byte_end":21527,"line_start":418,"line_end":418,"column_start":5,"column_end":17}},{"value":"/ Panics if the buffer is not finished.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21532,"byte_end":21573,"line_start":419,"line_end":419,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21578,"byte_end":21587,"line_start":420,"line_end":420,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22028,"byte_end":22047,"line_start":430,"line_end":430,"column_start":12,"column_end":31},"name":"mut_finished_buffer","qualname":"<FlatBufferBuilder>::mut_finished_buffer","value":"pub fn mut_finished_buffer(&mut Self) -> (&mut [u8], usize)","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable view of a finished buffer and location of where the flatbuffer starts.\n Note that modifying the flatbuffer data may corrupt it.\n # Panics\n Panics if the flatbuffer is not finished.\n","sig":null,"attributes":[{"value":"/ Returns a mutable view of a finished buffer and location of where the flatbuffer starts.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21779,"byte_end":21871,"line_start":425,"line_end":425,"column_start":5,"column_end":97}},{"value":"/ Note that modifying the flatbuffer data may corrupt it.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21876,"byte_end":21935,"line_start":426,"line_end":426,"column_start":5,"column_end":64}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21940,"byte_end":21952,"line_start":427,"line_end":427,"column_start":5,"column_end":17}},{"value":"/ Panics if the flatbuffer is not finished.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":21957,"byte_end":22002,"line_start":428,"line_end":428,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22007,"byte_end":22016,"line_start":429,"line_end":429,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22307,"byte_end":22315,"line_start":437,"line_end":437,"column_start":12,"column_end":20},"name":"required","qualname":"<FlatBufferBuilder>::required","value":"pub fn required(&Self, WIPOffset<TableFinishedWIPOffset>, VOffsetT,\n                &'static str)","parent":null,"children":[],"decl_id":null,"docs":" Assert that a field is present in the just-finished Table.","sig":null,"attributes":[{"value":"/ Assert that a field is present in the just-finished Table.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22134,"byte_end":22196,"line_start":433,"line_end":433,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22201,"byte_end":22204,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ This is somewhat low-level and is mostly used by the generated code.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22209,"byte_end":22281,"line_start":435,"line_end":435,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22286,"byte_end":22295,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23052,"byte_end":23072,"line_start":454,"line_end":454,"column_start":12,"column_end":32},"name":"finish_size_prefixed","qualname":"<FlatBufferBuilder>::finish_size_prefixed","value":"pub fn finish_size_prefixed<T>(&mut Self, WIPOffset<T>, Option<&str>)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it, pushing an optional file\n identifier on to it, pushing a size prefix on to it, and marking the\n internal state of the FlatBufferBuilder as `finished`. Afterwards,\n users can call `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it, pushing an optional file","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22739,"byte_end":22808,"line_start":449,"line_end":449,"column_start":5,"column_end":74}},{"value":"/ identifier on to it, pushing a size prefix on to it, and marking the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22813,"byte_end":22885,"line_start":450,"line_end":450,"column_start":5,"column_end":77}},{"value":"/ internal state of the FlatBufferBuilder as `finished`. Afterwards,","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22890,"byte_end":22960,"line_start":451,"line_end":451,"column_start":5,"column_end":75}},{"value":"/ users can call `finished_data` to get the resulting data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":22965,"byte_end":23026,"line_start":452,"line_end":452,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23031,"byte_end":23040,"line_start":453,"line_end":453,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23492,"byte_end":23498,"line_start":463,"line_end":463,"column_start":12,"column_end":18},"name":"finish","qualname":"<FlatBufferBuilder>::finish","value":"pub fn finish<T>(&mut Self, WIPOffset<T>, Option<&str>)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it, pushing an optional file\n identifier on to it, and marking the internal state of the\n FlatBufferBuilder as `finished`. Afterwards, users can call\n `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it, pushing an optional file","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23211,"byte_end":23280,"line_start":458,"line_end":458,"column_start":5,"column_end":74}},{"value":"/ identifier on to it, and marking the internal state of the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23285,"byte_end":23347,"line_start":459,"line_end":459,"column_start":5,"column_end":67}},{"value":"/ FlatBufferBuilder as `finished`. Afterwards, users can call","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23352,"byte_end":23415,"line_start":460,"line_end":460,"column_start":5,"column_end":68}},{"value":"/ `finished_data` to get the resulting data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23420,"byte_end":23466,"line_start":461,"line_end":461,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23471,"byte_end":23480,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23864,"byte_end":23878,"line_start":471,"line_end":471,"column_start":12,"column_end":26},"name":"finish_minimal","qualname":"<FlatBufferBuilder>::finish_minimal","value":"pub fn finish_minimal<T>(&mut Self, WIPOffset<T>)","parent":null,"children":[],"decl_id":null,"docs":" Finalize the FlatBuffer by: aligning it and marking the internal state\n of the FlatBufferBuilder as `finished`. Afterwards, users can call\n `finished_data` to get the resulting data.\n","sig":null,"attributes":[{"value":"/ Finalize the FlatBuffer by: aligning it and marking the internal state","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23638,"byte_end":23712,"line_start":467,"line_end":467,"column_start":5,"column_end":79}},{"value":"/ of the FlatBufferBuilder as `finished`. Afterwards, users can call","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23717,"byte_end":23787,"line_start":468,"line_end":468,"column_start":5,"column_end":75}},{"value":"/ `finished_data` to get the resulting data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23792,"byte_end":23838,"line_start":469,"line_end":469,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":23843,"byte_end":23852,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36274,"byte_end":36286,"line_start":30,"line_end":30,"column_start":11,"column_end":23},"name":"EndianScalar","qualname":"::endian_scalar::EndianScalar","value":"EndianScalar: Sized + PartialEq + Copy + Clone","parent":null,"children":[{"krate":0,"index":218},{"krate":0,"index":219}],"decl_id":null,"docs":" Trait for values that must be stored in little-endian byte order, but\n might be represented in memory as big-endian. Every type that implements\n EndianScalar is a valid FlatBuffers scalar value.","sig":null,"attributes":[{"value":"/ Trait for values that must be stored in little-endian byte order, but","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":35753,"byte_end":35826,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ might be represented in memory as big-endian. Every type that implements","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":35827,"byte_end":35903,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ EndianScalar is a valid FlatBuffers scalar value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":35904,"byte_end":35957,"line_start":22,"line_end":22,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":35958,"byte_end":35961,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The Rust stdlib does not provide a trait to represent scalars, so this trait","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":35962,"byte_end":36042,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ serves that purpose, too.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36043,"byte_end":36072,"line_start":25,"line_end":25,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36073,"byte_end":36076,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Note that we do not use the num-traits crate for this, because it provides","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36077,"byte_end":36155,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ \"too much\". For example, num-traits provides i128 support, but that is an","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36156,"byte_end":36233,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ invalid FlatBuffers type.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36234,"byte_end":36263,"line_start":29,"line_end":29,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36330,"byte_end":36346,"line_start":31,"line_end":31,"column_start":8,"column_end":24},"name":"to_little_endian","qualname":"::endian_scalar::EndianScalar::to_little_endian","value":"pub fn to_little_endian(Self) -> Self","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36369,"byte_end":36387,"line_start":32,"line_end":32,"column_start":8,"column_end":26},"name":"from_little_endian","qualname":"::endian_scalar::EndianScalar::from_little_endian","value":"pub fn from_little_endian(Self) -> Self","parent":{"krate":0,"index":217},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39152,"byte_end":39165,"line_start":139,"line_end":139,"column_start":8,"column_end":21},"name":"byte_swap_f32","qualname":"::endian_scalar::byte_swap_f32","value":"pub fn byte_swap_f32(f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bytes of an f32.\n","sig":null,"attributes":[{"value":"/ Swaps the bytes of an f32.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39084,"byte_end":39114,"line_start":136,"line_end":136,"column_start":1,"column_end":31}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39115,"byte_end":39134,"line_start":137,"line_end":137,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39135,"byte_end":39144,"line_start":138,"line_end":138,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39299,"byte_end":39312,"line_start":146,"line_end":146,"column_start":8,"column_end":21},"name":"byte_swap_f64","qualname":"::endian_scalar::byte_swap_f64","value":"pub fn byte_swap_f64(f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bytes of an f64.\n","sig":null,"attributes":[{"value":"/ Swaps the bytes of an f64.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39231,"byte_end":39261,"line_start":143,"line_end":143,"column_start":1,"column_end":31}},{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39262,"byte_end":39281,"line_start":144,"line_end":144,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39282,"byte_end":39291,"line_start":145,"line_end":145,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":230},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39614,"byte_end":39628,"line_start":156,"line_end":156,"column_start":15,"column_end":29},"name":"emplace_scalar","qualname":"::endian_scalar::emplace_scalar","value":"pub unsafe fn emplace_scalar<T: EndianScalar>(&mut [u8], T)","parent":null,"children":[],"decl_id":null,"docs":" Place an EndianScalar into the provided mutable byte slice. Performs\n endian conversion, if necessary.\n # Safety\n Caller must ensure `s.len() > size_of::<T>()`\n and `x` does not overlap with `s`.\n","sig":null,"attributes":[{"value":"/ Place an EndianScalar into the provided mutable byte slice. Performs","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39378,"byte_end":39450,"line_start":150,"line_end":150,"column_start":1,"column_end":73}},{"value":"/ endian conversion, if necessary.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39451,"byte_end":39487,"line_start":151,"line_end":151,"column_start":1,"column_end":37}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39488,"byte_end":39500,"line_start":152,"line_end":152,"column_start":1,"column_end":13}},{"value":"/ Caller must ensure `s.len() > size_of::<T>()`","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39501,"byte_end":39550,"line_start":153,"line_end":153,"column_start":1,"column_end":50}},{"value":"/ and `x` does not overlap with `s`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39551,"byte_end":39589,"line_start":154,"line_end":154,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39590,"byte_end":39599,"line_start":155,"line_end":155,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40071,"byte_end":40085,"line_start":170,"line_end":170,"column_start":15,"column_end":29},"name":"read_scalar_at","qualname":"::endian_scalar::read_scalar_at","value":"pub unsafe fn read_scalar_at<T: EndianScalar>(&[u8], usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read an EndianScalar from the provided byte slice at the specified location.\n Performs endian conversion, if necessary.\n # Safety\n Caller must ensure `s.len() > loc + size_of::<T>()`.\n","sig":null,"attributes":[{"value":"/ Read an EndianScalar from the provided byte slice at the specified location.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39850,"byte_end":39930,"line_start":165,"line_end":165,"column_start":1,"column_end":81}},{"value":"/ Performs endian conversion, if necessary.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39931,"byte_end":39976,"line_start":166,"line_end":166,"column_start":1,"column_end":46}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39977,"byte_end":39989,"line_start":167,"line_end":167,"column_start":1,"column_end":13}},{"value":"/ Caller must ensure `s.len() > loc + size_of::<T>()`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":39990,"byte_end":40046,"line_start":168,"line_end":168,"column_start":1,"column_end":57}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40047,"byte_end":40056,"line_start":169,"line_end":169,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40351,"byte_end":40362,"line_start":179,"line_end":179,"column_start":15,"column_end":26},"name":"read_scalar","qualname":"::endian_scalar::read_scalar","value":"pub unsafe fn read_scalar<T: EndianScalar>(&[u8]) -> T","parent":null,"children":[],"decl_id":null,"docs":" Read an EndianScalar from the provided byte slice. Performs endian\n conversion, if necessary.\n # Safety\n Caller must ensure `s.len() > size_of::<T>()`.\n","sig":null,"attributes":[{"value":"/ Read an EndianScalar from the provided byte slice. Performs endian","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40162,"byte_end":40232,"line_start":174,"line_end":174,"column_start":1,"column_end":71}},{"value":"/ conversion, if necessary.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40233,"byte_end":40262,"line_start":175,"line_end":175,"column_start":1,"column_end":30}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40263,"byte_end":40275,"line_start":176,"line_end":176,"column_start":1,"column_end":13}},{"value":"/ Caller must ensure `s.len() > size_of::<T>()`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40276,"byte_end":40326,"line_start":177,"line_end":177,"column_start":1,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":40327,"byte_end":40336,"line_start":178,"line_end":178,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":240},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41987,"byte_end":41993,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"Follow","qualname":"::follow::Follow","value":"Follow<'buf>","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":243}],"decl_id":null,"docs":" Follow is a trait that allows us to access FlatBuffers in a declarative,\n type safe, and fast way. They compile down to almost no code (after\n optimizations). Conceptually, Follow lifts the offset-based access\n patterns of FlatBuffers data into the type system. This trait is used\n pervasively at read time, to access tables, vtables, vectors, strings, and\n all other data. At this time, Follow is not utilized much on the write\n path.","sig":null,"attributes":[{"value":"/ Follow is a trait that allows us to access FlatBuffers in a declarative,","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41327,"byte_end":41403,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ type safe, and fast way. They compile down to almost no code (after","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41404,"byte_end":41475,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ optimizations). Conceptually, Follow lifts the offset-based access","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41476,"byte_end":41546,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ patterns of FlatBuffers data into the type system. This trait is used","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41547,"byte_end":41620,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ pervasively at read time, to access tables, vtables, vectors, strings, and","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41621,"byte_end":41699,"line_start":23,"line_end":23,"column_start":1,"column_end":79}},{"value":"/ all other data. At this time, Follow is not utilized much on the write","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41700,"byte_end":41774,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ path.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41775,"byte_end":41784,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41785,"byte_end":41788,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Writing a new Follow implementation primarily involves deciding whether","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41789,"byte_end":41864,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/ you want to return data (of the type Self::Inner) or do you want to","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41865,"byte_end":41936,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ continue traversing the FlatBuffer.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":41937,"byte_end":41976,"line_start":29,"line_end":29,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":242},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42011,"byte_end":42016,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"name":"Inner","qualname":"::follow::Follow::Inner","value":"type Inner;","parent":{"krate":0,"index":240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42025,"byte_end":42031,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"follow","qualname":"::follow::Follow::follow","value":"pub fn follow(&'buf [u8], usize) -> Self::Inner","parent":{"krate":0,"index":240},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":996},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42234,"byte_end":42245,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"FollowStart","qualname":"::follow::FollowStart","value":"","parent":null,"children":[],"decl_id":null,"docs":" FollowStart wraps a Follow impl in a struct type. This can make certain\n programming patterns more ergonomic.\n","sig":null,"attributes":[{"value":"/ FollowStart wraps a Follow impl in a struct type. This can make certain","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42080,"byte_end":42155,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ programming patterns more ergonomic.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42156,"byte_end":42196,"line_start":36,"line_end":36,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42337,"byte_end":42340,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<FollowStart<T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42316,"byte_end":42325,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42416,"byte_end":42427,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"self_follow","qualname":"<FollowStart<T>>::self_follow","value":"pub fn self_follow(&'a Self, &'a [u8], usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42395,"byte_end":42404,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43732,"byte_end":43736,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"root","qualname":"::get_root::root","value":"pub fn root<'buf, T>(&'buf [u8]) -> Result<T::Inner, InvalidFlatbuffer> where\nT: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of the Flatbuffer, verifying it first with default options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"/ Gets the root of the Flatbuffer, verifying it first with default options.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43448,"byte_end":43525,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43526,"byte_end":43618,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43619,"byte_end":43710,"line_start":24,"line_end":24,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43711,"byte_end":43724,"line_start":25,"line_end":25,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":280},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44227,"byte_end":44241,"line_start":39,"line_end":39,"column_start":8,"column_end":22},"name":"root_with_opts","qualname":"::get_root::root_with_opts","value":"pub fn root_with_opts<'opts, 'buf, T>(&'opts VerifierOptions, &'buf [u8])\n-> Result<T::Inner, InvalidFlatbuffer> where T: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of the Flatbuffer, verifying it first with given options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43935,"byte_end":43944,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/ Gets the root of the Flatbuffer, verifying it first with given options.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":43945,"byte_end":44020,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44021,"byte_end":44113,"line_start":36,"line_end":36,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44114,"byte_end":44205,"line_start":37,"line_end":37,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44206,"byte_end":44219,"line_start":38,"line_end":38,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44855,"byte_end":44873,"line_start":56,"line_end":56,"column_start":8,"column_end":26},"name":"size_prefixed_root","qualname":"::get_root::size_prefixed_root","value":"pub fn size_prefixed_root<'buf, T>(&'buf [u8])\n-> Result<T::Inner, InvalidFlatbuffer> where T: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of a size prefixed Flatbuffer, verifying it first with default options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44549,"byte_end":44558,"line_start":51,"line_end":51,"column_start":1,"column_end":10}},{"value":"/ Gets the root of a size prefixed Flatbuffer, verifying it first with default options.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44559,"byte_end":44648,"line_start":52,"line_end":52,"column_start":1,"column_end":90}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44649,"byte_end":44741,"line_start":53,"line_end":53,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44742,"byte_end":44833,"line_start":54,"line_end":54,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":44834,"byte_end":44847,"line_start":55,"line_end":55,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":287},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45390,"byte_end":45418,"line_start":69,"line_end":69,"column_start":8,"column_end":36},"name":"size_prefixed_root_with_opts","qualname":"::get_root::size_prefixed_root_with_opts","value":"pub fn size_prefixed_root_with_opts<'opts, 'buf,\n                                    T>(&'opts VerifierOptions, &'buf [u8])\n-> Result<T::Inner, InvalidFlatbuffer> where T: 'buf + Follow + Verifiable","parent":null,"children":[],"decl_id":null,"docs":" Gets the root of a size prefixed Flatbuffer, verifying it first with given options.\n Note that verification is an experimental feature and may not be maximally performant or\n catch every error (though that is the goal). See the `_unchecked` variants for previous\n behavior.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45086,"byte_end":45095,"line_start":64,"line_end":64,"column_start":1,"column_end":10}},{"value":"/ Gets the root of a size prefixed Flatbuffer, verifying it first with given options.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45096,"byte_end":45183,"line_start":65,"line_end":65,"column_start":1,"column_end":88}},{"value":"/ Note that verification is an experimental feature and may not be maximally performant or","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45184,"byte_end":45276,"line_start":66,"line_end":66,"column_start":1,"column_end":93}},{"value":"/ catch every error (though that is the goal). See the `_unchecked` variants for previous","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45277,"byte_end":45368,"line_start":67,"line_end":67,"column_start":1,"column_end":92}},{"value":"/ behavior.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45369,"byte_end":45382,"line_start":68,"line_end":68,"column_start":1,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":291},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46175,"byte_end":46189,"line_start":88,"line_end":88,"column_start":15,"column_end":29},"name":"root_unchecked","qualname":"::get_root::root_unchecked","value":"pub unsafe fn root_unchecked<'buf, T>(&'buf [u8]) -> T::Inner where\nT: Follow + 'buf","parent":null,"children":[],"decl_id":null,"docs":" Gets root for a trusted Flatbuffer.\n # Safety\n Flatbuffers accessors do not perform validation checks before accessing. Unlike the other\n `root` functions, this does not validate the flatbuffer before returning the accessor. Users\n must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading\n unchecked buffers may cause panics or even UB.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45756,"byte_end":45765,"line_start":81,"line_end":81,"column_start":1,"column_end":10}},{"value":"/ Gets root for a trusted Flatbuffer.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45766,"byte_end":45805,"line_start":82,"line_end":82,"column_start":1,"column_end":40}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45806,"byte_end":45818,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"/ Flatbuffers accessors do not perform validation checks before accessing. Unlike the other","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45819,"byte_end":45912,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ `root` functions, this does not validate the flatbuffer before returning the accessor. Users","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":45913,"byte_end":46009,"line_start":85,"line_end":85,"column_start":1,"column_end":97}},{"value":"/ must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46010,"byte_end":46109,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"/ unchecked buffers may cause panics or even UB.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46110,"byte_end":46160,"line_start":87,"line_end":87,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":294},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46745,"byte_end":46773,"line_start":102,"line_end":102,"column_start":15,"column_end":43},"name":"size_prefixed_root_unchecked","qualname":"::get_root::size_prefixed_root_unchecked","value":"pub unsafe fn size_prefixed_root_unchecked<'buf, T>(&'buf [u8]) -> T::Inner\nwhere T: Follow + 'buf","parent":null,"children":[],"decl_id":null,"docs":" Gets root for a trusted, size prefixed, Flatbuffer.\n # Safety\n Flatbuffers accessors do not perform validation checks before accessing. Unlike the other\n `root` functions, this does not validate the flatbuffer before returning the accessor. Users\n must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading\n unchecked buffers may cause panics or even UB.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46310,"byte_end":46319,"line_start":95,"line_end":95,"column_start":1,"column_end":10}},{"value":"/ Gets root for a trusted, size prefixed, Flatbuffer.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46320,"byte_end":46375,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ # Safety","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46376,"byte_end":46388,"line_start":97,"line_end":97,"column_start":1,"column_end":13}},{"value":"/ Flatbuffers accessors do not perform validation checks before accessing. Unlike the other","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46389,"byte_end":46482,"line_start":98,"line_end":98,"column_start":1,"column_end":94}},{"value":"/ `root` functions, this does not validate the flatbuffer before returning the accessor. Users","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46483,"byte_end":46579,"line_start":99,"line_end":99,"column_start":1,"column_end":97}},{"value":"/ must trust `data` contains a valid flatbuffer (e.g. b/c it was built by your software). Reading","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46580,"byte_end":46679,"line_start":100,"line_end":100,"column_start":1,"column_end":100}},{"value":"/ unchecked buffers may cause panics or even UB.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\get_root.rs","byte_start":46680,"byte_end":46730,"line_start":101,"line_end":101,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":323},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":47736,"byte_end":47763,"line_start":25,"line_end":25,"column_start":11,"column_end":38},"name":"FLATBUFFERS_MAX_BUFFER_SIZE","qualname":"::primitives::FLATBUFFERS_MAX_BUFFER_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":324},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":47807,"byte_end":47829,"line_start":27,"line_end":27,"column_start":11,"column_end":33},"name":"FILE_IDENTIFIER_LENGTH","qualname":"::primitives::FILE_IDENTIFIER_LENGTH","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":325},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":47853,"byte_end":47875,"line_start":29,"line_end":29,"column_start":11,"column_end":33},"name":"VTABLE_METADATA_FIELDS","qualname":"::primitives::VTABLE_METADATA_FIELDS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":326},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":47899,"byte_end":47906,"line_start":31,"line_end":31,"column_start":11,"column_end":18},"name":"SIZE_U8","qualname":"::primitives::SIZE_U8","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":327},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":47943,"byte_end":47950,"line_start":32,"line_end":32,"column_start":11,"column_end":18},"name":"SIZE_I8","qualname":"::primitives::SIZE_I8","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":47988,"byte_end":47996,"line_start":34,"line_end":34,"column_start":11,"column_end":19},"name":"SIZE_U16","qualname":"::primitives::SIZE_U16","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48034,"byte_end":48042,"line_start":35,"line_end":35,"column_start":11,"column_end":19},"name":"SIZE_I16","qualname":"::primitives::SIZE_I16","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":330},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48081,"byte_end":48089,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"SIZE_U32","qualname":"::primitives::SIZE_U32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48127,"byte_end":48135,"line_start":38,"line_end":38,"column_start":11,"column_end":19},"name":"SIZE_I32","qualname":"::primitives::SIZE_I32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48174,"byte_end":48182,"line_start":40,"line_end":40,"column_start":11,"column_end":19},"name":"SIZE_U64","qualname":"::primitives::SIZE_U64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":333},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48220,"byte_end":48228,"line_start":41,"line_end":41,"column_start":11,"column_end":19},"name":"SIZE_I64","qualname":"::primitives::SIZE_I64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48267,"byte_end":48275,"line_start":43,"line_end":43,"column_start":11,"column_end":19},"name":"SIZE_F32","qualname":"::primitives::SIZE_F32","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48313,"byte_end":48321,"line_start":44,"line_end":44,"column_start":11,"column_end":19},"name":"SIZE_F64","qualname":"::primitives::SIZE_F64","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48360,"byte_end":48372,"line_start":46,"line_end":46,"column_start":11,"column_end":23},"name":"SIZE_SOFFSET","qualname":"::primitives::SIZE_SOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48402,"byte_end":48414,"line_start":47,"line_end":47,"column_start":11,"column_end":23},"name":"SIZE_UOFFSET","qualname":"::primitives::SIZE_UOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":338},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48444,"byte_end":48456,"line_start":48,"line_end":48,"column_start":11,"column_end":23},"name":"SIZE_VOFFSET","qualname":"::primitives::SIZE_VOFFSET","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":339},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48487,"byte_end":48502,"line_start":50,"line_end":50,"column_start":11,"column_end":26},"name":"SIZE_SIZEPREFIX","qualname":"::primitives::SIZE_SIZEPREFIX","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":340},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48601,"byte_end":48609,"line_start":53,"line_end":53,"column_start":10,"column_end":18},"name":"SOffsetT","qualname":"::primitives::SOffsetT","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" SOffsetT is a relative pointer from tables to their vtables.\n","sig":null,"attributes":[{"value":"/ SOffsetT is a relative pointer from tables to their vtables.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48527,"byte_end":48591,"line_start":52,"line_end":52,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48709,"byte_end":48717,"line_start":56,"line_end":56,"column_start":10,"column_end":18},"name":"UOffsetT","qualname":"::primitives::UOffsetT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" UOffsetT is used represent both for relative pointers and lengths of vectors.\n","sig":null,"attributes":[{"value":"/ UOffsetT is used represent both for relative pointers and lengths of vectors.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48618,"byte_end":48699,"line_start":55,"line_end":55,"column_start":1,"column_end":82}}]},{"kind":"Type","id":{"krate":0,"index":342},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48817,"byte_end":48825,"line_start":59,"line_end":59,"column_start":10,"column_end":18},"name":"VOffsetT","qualname":"::primitives::VOffsetT","value":"u16","parent":null,"children":[],"decl_id":null,"docs":" VOffsetT is a relative pointer in vtables to point from tables to field data.\n","sig":null,"attributes":[{"value":"/ VOffsetT is a relative pointer in vtables to point from tables to field data.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48726,"byte_end":48807,"line_start":58,"line_end":58,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1006},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48944,"byte_end":48966,"line_start":63,"line_end":63,"column_start":12,"column_end":34},"name":"TableFinishedWIPOffset","qualname":"::primitives::TableFinishedWIPOffset","value":"TableFinishedWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" TableFinishedWIPOffset marks a WIPOffset as being for a finished table.\n","sig":null,"attributes":[{"value":"/ TableFinishedWIPOffset marks a WIPOffset as being for a finished table.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48834,"byte_end":48909,"line_start":61,"line_end":61,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1010},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49086,"byte_end":49110,"line_start":67,"line_end":67,"column_start":12,"column_end":36},"name":"TableUnfinishedWIPOffset","qualname":"::primitives::TableUnfinishedWIPOffset","value":"TableUnfinishedWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" TableUnfinishedWIPOffset marks a WIPOffset as being for an unfinished table.\n","sig":null,"attributes":[{"value":"/ TableUnfinishedWIPOffset marks a WIPOffset as being for an unfinished table.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":48971,"byte_end":49051,"line_start":65,"line_end":65,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1014},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49214,"byte_end":49228,"line_start":71,"line_end":71,"column_start":12,"column_end":26},"name":"UnionWIPOffset","qualname":"::primitives::UnionWIPOffset","value":"UnionWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" UnionWIPOffset marks a WIPOffset as being for a union value.\n","sig":null,"attributes":[{"value":"/ UnionWIPOffset marks a WIPOffset as being for a union value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49115,"byte_end":49179,"line_start":69,"line_end":69,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1018},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49328,"byte_end":49343,"line_start":75,"line_end":75,"column_start":12,"column_end":27},"name":"VTableWIPOffset","qualname":"::primitives::VTableWIPOffset","value":"VTableWIPOffset {  }","parent":null,"children":[],"decl_id":null,"docs":" VTableWIPOffset marks a WIPOffset as being for a vtable.\n","sig":null,"attributes":[{"value":"/ VTableWIPOffset marks a WIPOffset as being for a vtable.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49233,"byte_end":49293,"line_start":73,"line_end":73,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1022},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49673,"byte_end":49682,"line_start":82,"line_end":82,"column_start":12,"column_end":21},"name":"WIPOffset","qualname":"::primitives::WIPOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" WIPOffset contains an UOffsetT with a special meaning: it is the location of\n data relative to the *end* of an in-progress FlatBuffer. The\n FlatBufferBuilder uses this to track the location of objects in an absolute\n way. The impl of Push converts a WIPOffset into a ForwardsUOffset.\n","sig":null,"attributes":[{"value":"/ WIPOffset contains an UOffsetT with a special meaning: it is the location of","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49348,"byte_end":49428,"line_start":77,"line_end":77,"column_start":1,"column_end":81}},{"value":"/ data relative to the *end* of an in-progress FlatBuffer. The","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49429,"byte_end":49493,"line_start":78,"line_end":78,"column_start":1,"column_end":65}},{"value":"/ FlatBufferBuilder uses this to track the location of objects in an absolute","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49494,"byte_end":49573,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/ way. The impl of Push converts a WIPOffset into a ForwardsUOffset.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49574,"byte_end":49644,"line_start":80,"line_end":80,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50466,"byte_end":50469,"line_start":114,"line_end":114,"column_start":12,"column_end":15},"name":"new","qualname":"<WIPOffset<T>>::new","value":"pub fn new(UOffsetT) -> WIPOffset<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WIPOffset.\n","sig":null,"attributes":[{"value":"/ Create a new WIPOffset.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50413,"byte_end":50440,"line_start":112,"line_end":112,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50445,"byte_end":50454,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50723,"byte_end":50737,"line_start":124,"line_end":124,"column_start":12,"column_end":26},"name":"as_union_value","qualname":"<WIPOffset<T>>::as_union_value","value":"pub fn as_union_value(Self) -> WIPOffset<UnionWIPOffset>","parent":null,"children":[],"decl_id":null,"docs":" Return a wrapped value that brings its meaning as a union WIPOffset\n into the type system.\n","sig":null,"attributes":[{"value":"/ Return a wrapped value that brings its meaning as a union WIPOffset","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50588,"byte_end":50659,"line_start":121,"line_end":121,"column_start":5,"column_end":76}},{"value":"/ into the type system.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50664,"byte_end":50689,"line_start":122,"line_end":122,"column_start":5,"column_end":30}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50694,"byte_end":50711,"line_start":123,"line_end":123,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50879,"byte_end":50884,"line_start":129,"line_end":129,"column_start":12,"column_end":17},"name":"value","qualname":"<WIPOffset<T>>::value","value":"pub fn value(Self) -> UOffsetT","parent":null,"children":[],"decl_id":null,"docs":" Get the underlying value.\n","sig":null,"attributes":[{"value":"/ Get the underlying value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50816,"byte_end":50845,"line_start":127,"line_end":127,"column_start":5,"column_end":34}},{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50850,"byte_end":50867,"line_start":128,"line_end":128,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1030},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51579,"byte_end":51594,"line_start":158,"line_end":158,"column_start":12,"column_end":27},"name":"ForwardsUOffset","qualname":"::primitives::ForwardsUOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsUOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsUOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51419,"byte_end":51494,"line_start":155,"line_end":155,"column_start":1,"column_end":76}},{"value":"/ is incremented by the value contained in this type.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51495,"byte_end":51550,"line_start":156,"line_end":156,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52079,"byte_end":52084,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"value","qualname":"<ForwardsUOffset<T>>::value","value":"pub fn value(Self) -> UOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52050,"byte_end":52067,"line_start":173,"line_end":173,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1038},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52615,"byte_end":52630,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"ForwardsVOffset","qualname":"::primitives::ForwardsVOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsVOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsVOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52455,"byte_end":52530,"line_start":189,"line_end":189,"column_start":1,"column_end":76}},{"value":"/ is incremented by the value contained in this type.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52531,"byte_end":52586,"line_start":190,"line_end":190,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52723,"byte_end":52728,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"value","qualname":"<ForwardsVOffset<T>>::value","value":"pub fn value(&Self) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52694,"byte_end":52711,"line_start":194,"line_end":194,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1046},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53457,"byte_end":53473,"line_start":222,"line_end":222,"column_start":12,"column_end":28},"name":"BackwardsSOffset","qualname":"::primitives::BackwardsSOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" ForwardsSOffset is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by the *negative* of the value contained in this type.\n","sig":null,"attributes":[{"value":"/ ForwardsSOffset is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53279,"byte_end":53354,"line_start":219,"line_end":219,"column_start":1,"column_end":76}},{"value":"/ is incremented by the *negative* of the value contained in this type.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53355,"byte_end":53428,"line_start":220,"line_end":220,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53567,"byte_end":53572,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"value","qualname":"<BackwardsSOffset<T>>::value","value":"pub fn value(&Self) -> SOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53538,"byte_end":53555,"line_start":224,"line_end":224,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":408},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54309,"byte_end":54323,"line_start":251,"line_end":251,"column_start":12,"column_end":26},"name":"SkipSizePrefix","qualname":"::primitives::SkipSizePrefix","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipSizePrefix is used by Follow to traverse a FlatBuffer: the pointer is\n incremented by a fixed constant in order to skip over the size prefix value.\n","sig":null,"attributes":[{"value":"/ SkipSizePrefix is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54139,"byte_end":54216,"line_start":249,"line_end":249,"column_start":1,"column_end":78}},{"value":"/ incremented by a fixed constant in order to skip over the size prefix value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54217,"byte_end":54297,"line_start":250,"line_end":250,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":417},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54740,"byte_end":54754,"line_start":262,"line_end":262,"column_start":12,"column_end":26},"name":"SkipRootOffset","qualname":"::primitives::SkipRootOffset","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipRootOffset is used by Follow to traverse a FlatBuffer: the pointer is\n incremented by a fixed constant in order to skip over the root offset value.\n","sig":null,"attributes":[{"value":"/ SkipRootOffset is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54570,"byte_end":54647,"line_start":260,"line_end":260,"column_start":1,"column_end":78}},{"value":"/ incremented by a fixed constant in order to skip over the root offset value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54648,"byte_end":54728,"line_start":261,"line_end":261,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55165,"byte_end":55179,"line_start":273,"line_end":273,"column_start":12,"column_end":26},"name":"FileIdentifier","qualname":"::primitives::FileIdentifier","value":"","parent":null,"children":[],"decl_id":null,"docs":" FileIdentifier is used by Follow to traverse a FlatBuffer: the pointer is\n dereferenced into a byte slice, whose bytes are the file identifer value.\n","sig":null,"attributes":[{"value":"/ FileIdentifier is used by Follow to traverse a FlatBuffer: the pointer is","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54998,"byte_end":55075,"line_start":271,"line_end":271,"column_start":1,"column_end":78}},{"value":"/ dereferenced into a byte slice, whose bytes are the file identifer value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55076,"byte_end":55153,"line_start":272,"line_end":272,"column_start":1,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":432},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55568,"byte_end":55586,"line_start":285,"line_end":285,"column_start":12,"column_end":30},"name":"SkipFileIdentifier","qualname":"::primitives::SkipFileIdentifier","value":"","parent":null,"children":[],"decl_id":null,"docs":" SkipFileIdentifier is used by Follow to traverse a FlatBuffer: the pointer\n is incremented by a fixed constant in order to skip over the file\n identifier value.\n","sig":null,"attributes":[{"value":"/ SkipFileIdentifier is used by Follow to traverse a FlatBuffer: the pointer","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55386,"byte_end":55464,"line_start":282,"line_end":282,"column_start":1,"column_end":79}},{"value":"/ is incremented by a fixed constant in order to skip over the file","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55465,"byte_end":55534,"line_start":283,"line_end":283,"column_start":1,"column_end":70}},{"value":"/ identifier value.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55535,"byte_end":55556,"line_start":284,"line_end":284,"column_start":1,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":460},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57842,"byte_end":57846,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"Push","qualname":"::push::Push","value":"Push: Sized","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" Trait to abstract over functionality needed to write values (either owned\n or referenced). Used in FlatBufferBuilder and implemented for generated\n types.\n","sig":null,"attributes":[{"value":"/ Trait to abstract over functionality needed to write values (either owned","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57667,"byte_end":57744,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ or referenced). Used in FlatBufferBuilder and implemented for generated","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57745,"byte_end":57820,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ types.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57821,"byte_end":57831,"line_start":24,"line_end":24,"column_start":1,"column_end":11}}]},{"kind":"Type","id":{"krate":0,"index":461},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57865,"byte_end":57871,"line_start":26,"line_end":26,"column_start":10,"column_end":16},"name":"Output","qualname":"::push::Push::Output","value":"type Output;","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57880,"byte_end":57884,"line_start":27,"line_end":27,"column_start":8,"column_end":12},"name":"push","qualname":"::push::Push::push","value":"pub fn push(&Self, &mut [u8], &[u8])","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57944,"byte_end":57948,"line_start":29,"line_end":29,"column_start":8,"column_end":12},"name":"size","qualname":"::push::Push::size","value":"pub fn size() -> usize","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57927,"byte_end":57936,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58023,"byte_end":58032,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"alignment","qualname":"::push::Push::alignment","value":"pub fn alignment() -> PushAlignment","parent":{"krate":0,"index":460},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58006,"byte_end":58015,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":465},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58272,"byte_end":58285,"line_start":40,"line_end":40,"column_start":12,"column_end":25},"name":"PushAlignment","qualname":"::push::PushAlignment","value":"","parent":null,"children":[],"decl_id":null,"docs":" Ensure Push alignment calculations are typesafe (because this helps reduce\n implementation issues when using FlatBufferBuilder::align).\n","sig":null,"attributes":[{"value":"/ Ensure Push alignment calculations are typesafe (because this helps reduce","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58118,"byte_end":58196,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/ implementation issues when using FlatBufferBuilder::align).","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58197,"byte_end":58260,"line_start":39,"line_end":39,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58340,"byte_end":58343,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<PushAlignment>::new","value":"pub fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58319,"byte_end":58328,"line_start":42,"line_end":42,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58426,"byte_end":58431,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"value","qualname":"<PushAlignment>::value","value":"pub fn value(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58405,"byte_end":58414,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58496,"byte_end":58502,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"max_of","qualname":"<PushAlignment>::max_of","value":"pub fn max_of(&Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58475,"byte_end":58484,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1127},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60106,"byte_end":60111,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Table","qualname":"::table::Table","value":"Table { buf, loc }","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1129},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60126,"byte_end":60129,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"buf","qualname":"::table::Table::buf","value":"&'a [u8]","parent":{"krate":0,"index":1127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1130},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60149,"byte_end":60152,"line_start":24,"line_end":24,"column_start":9,"column_end":12},"name":"loc","qualname":"::table::Table::loc","value":"usize","parent":{"krate":0,"index":1127},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60210,"byte_end":60213,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Table>::new","value":"pub fn new(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60189,"byte_end":60198,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60309,"byte_end":60315,"line_start":33,"line_end":33,"column_start":12,"column_end":18},"name":"vtable","qualname":"<Table>::vtable","value":"pub fn vtable(&Self) -> VTable","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60288,"byte_end":60297,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60437,"byte_end":60440,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"get","qualname":"<Table>::get","value":"pub fn get<T: Follow + 'a>(&Self, VOffsetT, Option<T::Inner>)\n-> Option<T::Inner>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60416,"byte_end":60425,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":491},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60938,"byte_end":60959,"line_start":59,"line_end":59,"column_start":8,"column_end":29},"name":"buffer_has_identifier","qualname":"::table::buffer_has_identifier","value":"pub fn buffer_has_identifier(&[u8], &str, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60921,"byte_end":60930,"line_start":58,"line_end":58,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":535},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":62320,"byte_end":62326,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Vector","qualname":"::vector::Vector","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63323,"byte_end":63326,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<Vector>::new","value":"pub fn new(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63294,"byte_end":63311,"line_start":65,"line_end":65,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63499,"byte_end":63502,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"len","qualname":"<Vector>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63470,"byte_end":63487,"line_start":74,"line_end":74,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63632,"byte_end":63640,"line_start":79,"line_end":79,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vector>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63603,"byte_end":63620,"line_start":78,"line_end":78,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63769,"byte_end":63772,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"get","qualname":"<Vector>::get","value":"pub fn get(&Self, usize) -> T::Inner","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63740,"byte_end":63757,"line_start":85,"line_end":85,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":64029,"byte_end":64033,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"iter","qualname":"<Vector>::iter","value":"pub fn iter(&Self) -> VectorIter","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":64000,"byte_end":64017,"line_start":93,"line_end":93,"column_start":5,"column_end":22}}]},{"kind":"Trait","id":{"krate":0,"index":569},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":64122,"byte_end":64137,"line_start":99,"line_end":99,"column_start":11,"column_end":26},"name":"SafeSliceAccess","qualname":"::vector::SafeSliceAccess","value":"SafeSliceAccess","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":64202,"byte_end":64212,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"safe_slice","qualname":"<Vector>::safe_slice","value":"pub fn safe_slice(Self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":587},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":65371,"byte_end":65386,"line_start":137,"line_end":137,"column_start":8,"column_end":23},"name":"follow_cast_ref","qualname":"::vector::follow_cast_ref","value":"pub fn follow_cast_ref<'a, T: Sized + 'a>(&'a [u8], usize) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":66913,"byte_end":66923,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"VectorIter","qualname":"::vector::VectorIter","value":"VectorIter {  }","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151}],"decl_id":null,"docs":" An iterator over a `Vector`.\n","sig":null,"attributes":[{"value":"/ An iterator over a `Vector`.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":66852,"byte_end":66884,"line_start":181,"line_end":181,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67087,"byte_end":67098,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"from_vector","qualname":"<VectorIter>::from_vector","value":"pub fn from_vector(Vector) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67066,"byte_end":67075,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67522,"byte_end":67532,"line_start":205,"line_end":205,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<VectorIter>::from_slice","value":"pub fn from_slice(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67501,"byte_end":67510,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"StructVariant","id":{"krate":0,"index":1157},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70626,"byte_end":70639,"line_start":11,"line_end":11,"column_start":5,"column_end":18},"name":"VectorElement","qualname":"::verifier::ErrorTraceDetail::VectorElement","value":"ErrorTraceDetail::VectorElement { index, position }","parent":{"krate":0,"index":1156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1160},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70700,"byte_end":70710,"line_start":15,"line_end":15,"column_start":5,"column_end":15},"name":"TableField","qualname":"::verifier::ErrorTraceDetail::TableField","value":"ErrorTraceDetail::TableField { field_name, position }","parent":{"krate":0,"index":1156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1163},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70783,"byte_end":70795,"line_start":19,"line_end":19,"column_start":5,"column_end":17},"name":"UnionVariant","qualname":"::verifier::ErrorTraceDetail::UnionVariant","value":"ErrorTraceDetail::UnionVariant { variant, position }","parent":{"krate":0,"index":1156},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1156},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70603,"byte_end":70619,"line_start":10,"line_end":10,"column_start":10,"column_end":26},"name":"ErrorTraceDetail","qualname":"::verifier::ErrorTraceDetail","value":"pub enum ErrorTraceDetail {\n    VectorElement {\n        index: usize,\n        position: usize,\n    },\n    TableField {\n        field_name: &'static str,\n        position: usize,\n    },\n    UnionVariant {\n        variant: &'static str,\n        position: usize,\n    },\n}","parent":null,"children":[{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163}],"decl_id":null,"docs":" Traces the location of data errors. Not populated for Dos detecting errors.\n Useful for MissingRequiredField and Utf8Error in particular, though\n the other errors should not be producible by correct flatbuffers implementations.\n","sig":null,"attributes":[{"value":"/ Traces the location of data errors. Not populated for Dos detecting errors.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70317,"byte_end":70396,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ Useful for MissingRequiredField and Utf8Error in particular, though","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70397,"byte_end":70468,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/ the other errors should not be producible by correct flatbuffers implementations.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70469,"byte_end":70554,"line_start":8,"line_end":8,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":70922,"byte_end":70932,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"ErrorTrace","qualname":"::verifier::ErrorTrace","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":1219},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71429,"byte_end":71449,"line_start":38,"line_end":38,"column_start":5,"column_end":25},"name":"MissingRequiredField","qualname":"::verifier::InvalidFlatbuffer::MissingRequiredField","value":"InvalidFlatbuffer::MissingRequiredField { required, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Missing required field `{required}`.\\n{error_trace}\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71361,"byte_end":71424,"line_start":37,"line_end":37,"column_start":5,"column_end":68}}]},{"kind":"StructVariant","id":{"krate":0,"index":1222},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71680,"byte_end":71697,"line_start":46,"line_end":46,"column_start":5,"column_end":22},"name":"InconsistentUnion","qualname":"::verifier::InvalidFlatbuffer::InconsistentUnion","value":"InvalidFlatbuffer::InconsistentUnion { field, field_type, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Union exactly one of union discriminant (`{field_type}`) and value \\\n             (`{field}`) are present.\\n{error_trace}\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71528,"byte_end":71675,"line_start":42,"line_end":45,"column_start":5,"column_end":7}}]},{"kind":"StructVariant","id":{"krate":0,"index":1226},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71882,"byte_end":71891,"line_start":52,"line_end":52,"column_start":5,"column_end":14},"name":"Utf8Error","qualname":"::verifier::InvalidFlatbuffer::Utf8Error","value":"InvalidFlatbuffer::Utf8Error { error, range, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Utf8 error for string in {range:?}: {error}\\n{error_trace}\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71807,"byte_end":71877,"line_start":51,"line_end":51,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":1230},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72145,"byte_end":72166,"line_start":60,"line_end":60,"column_start":5,"column_end":26},"name":"MissingNullTerminator","qualname":"::verifier::InvalidFlatbuffer::MissingNullTerminator","value":"InvalidFlatbuffer::MissingNullTerminator { range, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"String in range [{}, {}) is missing its null terminator.\\n{error_trace}\",\n        range.start, range.end)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72021,"byte_end":72140,"line_start":58,"line_end":59,"column_start":5,"column_end":37}}]},{"kind":"StructVariant","id":{"krate":0,"index":1233},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72334,"byte_end":72343,"line_start":65,"line_end":65,"column_start":5,"column_end":14},"name":"Unaligned","qualname":"::verifier::InvalidFlatbuffer::Unaligned","value":"InvalidFlatbuffer::Unaligned { position, unaligned_type, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Type `{unaligned_type}` at position {position} is unaligned.\\n{error_trace}\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72242,"byte_end":72329,"line_start":64,"line_end":64,"column_start":5,"column_end":92}}]},{"kind":"StructVariant","id":{"krate":0,"index":1237},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72541,"byte_end":72557,"line_start":71,"line_end":71,"column_start":5,"column_end":21},"name":"RangeOutOfBounds","qualname":"::verifier::InvalidFlatbuffer::RangeOutOfBounds","value":"InvalidFlatbuffer::RangeOutOfBounds { range, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Range [{}, {}) is out of bounds.\\n{error_trace}\", range.start,\n        range.end)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72453,"byte_end":72536,"line_start":70,"line_end":70,"column_start":5,"column_end":88}}]},{"kind":"StructVariant","id":{"krate":0,"index":1240},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72778,"byte_end":72801,"line_start":79,"line_end":79,"column_start":5,"column_end":28},"name":"SignedOffsetOutOfBounds","qualname":"::verifier::InvalidFlatbuffer::SignedOffsetOutOfBounds","value":"InvalidFlatbuffer::SignedOffsetOutOfBounds { soffset, position, error_trace }","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Signed offset at position {position} has value {soffset} which points out of bounds.\\\n             \\n{error_trace}\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72633,"byte_end":72773,"line_start":75,"line_end":78,"column_start":5,"column_end":7}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1244},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73030,"byte_end":73043,"line_start":86,"line_end":86,"column_start":5,"column_end":18},"name":"TooManyTables","qualname":"::verifier::InvalidFlatbuffer::TooManyTables","value":"InvalidFlatbuffer::TooManyTables","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Too many tables.\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":72997,"byte_end":73025,"line_start":85,"line_end":85,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1246},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73090,"byte_end":73110,"line_start":88,"line_end":88,"column_start":5,"column_end":25},"name":"ApparentSizeTooLarge","qualname":"::verifier::InvalidFlatbuffer::ApparentSizeTooLarge","value":"InvalidFlatbuffer::ApparentSizeTooLarge","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Apparent size too large.\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73049,"byte_end":73085,"line_start":87,"line_end":87,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1248},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73166,"byte_end":73183,"line_start":90,"line_end":90,"column_start":5,"column_end":22},"name":"DepthLimitReached","qualname":"::verifier::InvalidFlatbuffer::DepthLimitReached","value":"InvalidFlatbuffer::DepthLimitReached","parent":{"krate":0,"index":1193},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"error(\"Nested table depth limit reached.\")","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73116,"byte_end":73161,"line_start":89,"line_end":89,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71337,"byte_end":71354,"line_start":36,"line_end":36,"column_start":10,"column_end":27},"name":"InvalidFlatbuffer","qualname":"::verifier::InvalidFlatbuffer","value":"pub enum InvalidFlatbuffer {\n    MissingRequiredField {\n        required: &'static str,\n        error_trace: ErrorTrace,\n    },\n    InconsistentUnion {\n        field: &'static str,\n        field_type: &'static str,\n        error_trace: ErrorTrace,\n    },\n    Utf8Error {\n        error: std::str::Utf8Error,\n        range: Range<usize>,\n        error_trace: ErrorTrace,\n    },\n    MissingNullTerminator {\n        range: Range<usize>,\n        error_trace: ErrorTrace,\n    },\n    Unaligned {\n        position: usize,\n        unaligned_type: &'static str,\n        error_trace: ErrorTrace,\n    },\n    RangeOutOfBounds {\n        range: Range<usize>,\n        error_trace: ErrorTrace,\n    },\n    SignedOffsetOutOfBounds {\n        soffset: SOffsetT,\n        position: usize,\n        error_trace: ErrorTrace,\n    },\n    TooManyTables,\n    ApparentSizeTooLarge,\n    DepthLimitReached,\n}","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1222},{"krate":0,"index":1226},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1237},{"krate":0,"index":1240},{"krate":0,"index":1244},{"krate":0,"index":1246},{"krate":0,"index":1248}],"decl_id":null,"docs":" Describes how a flatuffer is invalid and, for data errors, roughly where. No extra tracing\n information is given for DoS detecting errors since it will probably be a lot.\n","sig":null,"attributes":[{"value":"/ Describes how a flatuffer is invalid and, for data errors, roughly where. No extra tracing","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71104,"byte_end":71198,"line_start":33,"line_end":33,"column_start":1,"column_end":95}},{"value":"/ information is given for DoS detecting errors since it will probably be a lot.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71199,"byte_end":71281,"line_start":34,"line_end":34,"column_start":1,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":1250},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76267,"byte_end":76282,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"VerifierOptions","qualname":"::verifier::VerifierOptions","value":"VerifierOptions { max_depth, max_tables, max_apparent_size, ignore_missing_null_terminator }","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253},{"krate":0,"index":1254}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1251},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76363,"byte_end":76372,"line_start":188,"line_end":188,"column_start":9,"column_end":18},"name":"max_depth","qualname":"::verifier::VerifierOptions::max_depth","value":"usize","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Maximum depth of nested tables allowed in a valid flatbuffer.\n","sig":null,"attributes":[{"value":"/ Maximum depth of nested tables allowed in a valid flatbuffer.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76289,"byte_end":76354,"line_start":187,"line_end":187,"column_start":5,"column_end":70}}]},{"kind":"Field","id":{"krate":0,"index":1252},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76453,"byte_end":76463,"line_start":190,"line_end":190,"column_start":9,"column_end":19},"name":"max_tables","qualname":"::verifier::VerifierOptions::max_tables","value":"usize","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Maximum number of tables allowed in a valid flatbuffer.\n","sig":null,"attributes":[{"value":"/ Maximum number of tables allowed in a valid flatbuffer.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76385,"byte_end":76444,"line_start":189,"line_end":189,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76589,"byte_end":76606,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"max_apparent_size","qualname":"::verifier::VerifierOptions::max_apparent_size","value":"usize","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Maximum \"apparent\" size of the message if the Flatbuffer object DAG is expanded into a\n tree.\n","sig":null,"attributes":[{"value":"/ Maximum \"apparent\" size of the message if the Flatbuffer object DAG is expanded into a","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76476,"byte_end":76566,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/ tree.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76571,"byte_end":76580,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Field","id":{"krate":0,"index":1254},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76786,"byte_end":76816,"line_start":196,"line_end":196,"column_start":9,"column_end":39},"name":"ignore_missing_null_terminator","qualname":"::verifier::VerifierOptions::ignore_missing_null_terminator","value":"bool","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":" Ignore errors where a string is missing its null terminator.\n This is mostly a problem if the message will be sent to a client using old c-strings.\n","sig":null,"attributes":[{"value":"/ Ignore errors where a string is missing its null terminator.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76619,"byte_end":76683,"line_start":194,"line_end":194,"column_start":5,"column_end":69}},{"value":"/ This is mostly a problem if the message will be sent to a client using old c-strings.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":76688,"byte_end":76777,"line_start":195,"line_end":195,"column_start":5,"column_end":94}}]},{"kind":"Struct","id":{"krate":0,"index":1266},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77421,"byte_end":77429,"line_start":215,"line_end":215,"column_start":12,"column_end":20},"name":"Verifier","qualname":"::verifier::Verifier","value":"Verifier {  }","parent":null,"children":[{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273}],"decl_id":null,"docs":" Carries the verification state. Should not be reused between tables.\n","sig":null,"attributes":[{"value":"/ Carries the verification state. Should not be reused between tables.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77320,"byte_end":77392,"line_start":213,"line_end":213,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77625,"byte_end":77628,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"new","qualname":"<Verifier>::new","value":"pub fn new(&'opts VerifierOptions, &'buf [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77902,"byte_end":77907,"line_start":234,"line_end":234,"column_start":12,"column_end":17},"name":"reset","qualname":"<Verifier>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets verifier internal state.\n","sig":null,"attributes":[{"value":"/ Resets verifier internal state.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77841,"byte_end":77876,"line_start":232,"line_end":232,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77881,"byte_end":77890,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":79297,"byte_end":79306,"line_start":272,"line_end":272,"column_start":12,"column_end":21},"name":"in_buffer","qualname":"<Verifier>::in_buffer","value":"pub fn in_buffer<T>(&mut Self, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Check that there really is a T in there.\n","sig":null,"attributes":[{"value":"/ Check that there really is a T in there.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":79227,"byte_end":79271,"line_start":270,"line_end":270,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":79276,"byte_end":79285,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":80782,"byte_end":80793,"line_start":319,"line_end":319,"column_start":12,"column_end":23},"name":"visit_table","qualname":"<Verifier>::visit_table","value":"pub fn visit_table<'ver>(&'ver mut Self, usize) -> Result<TableVerifier>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":80761,"byte_end":80770,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":81790,"byte_end":81810,"line_start":346,"line_end":346,"column_start":12,"column_end":32},"name":"verify_union_variant","qualname":"<Verifier>::verify_union_variant","value":"pub fn verify_union_variant<T: Verifiable>(&mut Self, &'static str, usize)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Runs the union variant's type's verifier assuming the variant is at the given position,\n tracing the error.\n","sig":null,"attributes":[{"value":"/ Runs the union variant's type's verifier assuming the variant is at the given position,","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":81660,"byte_end":81751,"line_start":344,"line_end":344,"column_start":5,"column_end":96}},{"value":"/ tracing the error.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":81756,"byte_end":81778,"line_start":345,"line_end":345,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":719},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":82200,"byte_end":82213,"line_start":358,"line_end":358,"column_start":12,"column_end":25},"name":"TableVerifier","qualname":"::verifier::TableVerifier","value":"TableVerifier {  }","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83085,"byte_end":83096,"line_start":383,"line_end":383,"column_start":12,"column_end":23},"name":"visit_field","qualname":"<TableVerifier>::visit_field","value":"pub fn visit_field<T: Verifiable>(Self, &'static str, VOffsetT, bool)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83064,"byte_end":83073,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83931,"byte_end":83942,"line_start":407,"line_end":407,"column_start":12,"column_end":23},"name":"visit_union","qualname":"<TableVerifier>::visit_union","value":"pub fn visit_union<Key,\n                   UnionVerifier>(Self, &'static str, VOffsetT, &'static str,\n                                  VOffsetT, bool, UnionVerifier)\n-> Result<Self> where Key: Follow + Verifiable,\nUnionVerifier: std::ops::FnOnce(<Key as Follow>::Inner, &mut Verifier, usize)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Union verification is complicated. The schemas passes this function the metadata of the\n union's key (discriminant) and value fields, and a callback. The function verifies and\n reads the key, then invokes the callback to perform data-dependent verification.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83630,"byte_end":83639,"line_start":403,"line_end":403,"column_start":5,"column_end":14}},{"value":"/ Union verification is complicated. The schemas passes this function the metadata of the","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83644,"byte_end":83735,"line_start":404,"line_end":404,"column_start":5,"column_end":96}},{"value":"/ union's key (discriminant) and value fields, and a callback. The function verifies and","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83740,"byte_end":83830,"line_start":405,"line_end":405,"column_start":5,"column_end":95}},{"value":"/ reads the key, then invokes the callback to perform data-dependent verification.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":83835,"byte_end":83919,"line_start":406,"line_end":406,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85379,"byte_end":85385,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"finish","qualname":"<TableVerifier>::finish","value":"pub fn finish(Self) -> &'ver mut Verifier","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85600,"byte_end":85610,"line_start":454,"line_end":454,"column_start":11,"column_end":21},"name":"Verifiable","qualname":"::verifier::Verifiable","value":"Verifiable","parent":null,"children":[{"krate":0,"index":739}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85765,"byte_end":85777,"line_start":457,"line_end":457,"column_start":8,"column_end":20},"name":"run_verifier","qualname":"::verifier::Verifiable::run_verifier","value":"pub fn run_verifier(&mut Verifier, usize) -> Result<()>","parent":{"krate":0,"index":738},"children":[],"decl_id":null,"docs":" Runs the verifier for this type, assuming its at position `pos` in the verifier's buffer.\n Should not need to be called directly.\n","sig":null,"attributes":[{"value":"/ Runs the verifier for this type, assuming its at position `pos` in the verifier's buffer.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85617,"byte_end":85710,"line_start":455,"line_end":455,"column_start":5,"column_end":98}},{"value":"/ Should not need to be called directly.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85715,"byte_end":85757,"line_start":456,"line_end":456,"column_start":5,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":745},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":86662,"byte_end":86683,"line_start":481,"line_end":481,"column_start":11,"column_end":32},"name":"SimpleToVerifyInSlice","qualname":"::verifier::SimpleToVerifyInSlice","value":"SimpleToVerifyInSlice","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1322},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90319,"byte_end":90325,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"VTable","qualname":"::vtable::VTable","value":"VTable {  }","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325}],"decl_id":null,"docs":" VTable encapsulates read-only usage of a vtable. It is only to be used\n by generated code.\n","sig":null,"attributes":[{"value":"/ VTable encapsulates read-only usage of a vtable. It is only to be used","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90193,"byte_end":90267,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ by generated code.","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90268,"byte_end":90290,"line_start":22,"line_end":22,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90536,"byte_end":90540,"line_start":36,"line_end":36,"column_start":12,"column_end":16},"name":"init","qualname":"<VTable>::init","value":"pub fn init(&'a [u8], usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90623,"byte_end":90633,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"num_fields","qualname":"<VTable>::num_fields","value":"pub fn num_fields(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90715,"byte_end":90724,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"num_bytes","qualname":"<VTable>::num_bytes","value":"pub fn num_bytes(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90835,"byte_end":90858,"line_start":45,"line_end":45,"column_start":12,"column_end":35},"name":"object_inline_num_bytes","qualname":"<VTable>::object_inline_num_bytes","value":"pub fn object_inline_num_bytes(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":91003,"byte_end":91012,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"get_field","qualname":"<VTable>::get_field","value":"pub fn get_field(&Self, usize) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":91369,"byte_end":91372,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"get","qualname":"<VTable>::get","value":"pub fn get(&Self, VOffsetT) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":91653,"byte_end":91661,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<VTable>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":791},"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":91796,"byte_end":91823,"line_start":75,"line_end":75,"column_start":8,"column_end":35},"name":"field_index_to_field_offset","qualname":"::vtable::field_index_to_field_offset","value":"pub fn field_index_to_field_offset(VOffsetT) -> VOffsetT","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":91769,"byte_end":91788,"line_start":74,"line_end":74,"column_start":1,"column_end":20}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3356,"byte_end":3361,"line_start":27,"line_end":27,"column_start":43,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3696,"byte_end":3701,"line_start":39,"line_end":39,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4109,"byte_end":4114,"line_start":59,"line_end":59,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4505,"byte_end":4510,"line_start":73,"line_end":73,"column_start":73,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4838,"byte_end":4843,"line_start":83,"line_end":83,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":5594,"byte_end":5599,"line_start":110,"line_end":110,"column_start":63,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8063,"byte_end":8080,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":168},{"krate":0,"index":172},{"krate":0,"index":176},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":34978,"byte_end":34995,"line_start":784,"line_end":784,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":212}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42295,"byte_end":42306,"line_start":39,"line_end":39,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42554,"byte_end":42565,"line_start":49,"line_end":49,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49963,"byte_end":49972,"line_start":88,"line_end":88,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49997,"byte_end":50006,"line_start":89,"line_end":89,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50102,"byte_end":50111,"line_start":96,"line_end":96,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50141,"byte_end":50150,"line_start":98,"line_end":98,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50262,"byte_end":50271,"line_start":104,"line_end":104,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50394,"byte_end":50403,"line_start":111,"line_end":111,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50946,"byte_end":50955,"line_start":134,"line_end":134,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51254,"byte_end":51269,"line_start":146,"line_end":146,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51881,"byte_end":51896,"line_start":164,"line_end":164,"column_start":18,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51921,"byte_end":51936,"line_start":165,"line_end":165,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52025,"byte_end":52040,"line_start":172,"line_end":172,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52168,"byte_end":52183,"line_start":179,"line_end":179,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52669,"byte_end":52684,"line_start":193,"line_end":193,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52813,"byte_end":52828,"line_start":200,"line_end":200,"column_start":40,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53122,"byte_end":53137,"line_start":210,"line_end":210,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53512,"byte_end":53528,"line_start":223,"line_end":223,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53657,"byte_end":53673,"line_start":230,"line_end":230,"column_start":40,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53981,"byte_end":53997,"line_start":240,"line_end":240,"column_start":18,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":406},{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54388,"byte_end":54402,"line_start":252,"line_end":252,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54819,"byte_end":54833,"line_start":263,"line_end":263,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55205,"byte_end":55219,"line_start":274,"line_end":274,"column_start":25,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55651,"byte_end":55669,"line_start":286,"line_end":286,"column_start":45,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58299,"byte_end":58312,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60173,"byte_end":60178,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60773,"byte_end":60778,"line_start":50,"line_end":50,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":62401,"byte_end":62407,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":62724,"byte_end":62730,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63150,"byte_end":63156,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63189,"byte_end":63195,"line_start":58,"line_end":58,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63274,"byte_end":63280,"line_start":64,"line_end":64,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63720,"byte_end":63726,"line_start":84,"line_end":84,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":567},{"krate":0,"index":568}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":64175,"byte_end":64181,"line_start":100,"line_end":100,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":66707,"byte_end":66713,"line_start":174,"line_end":174,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67042,"byte_end":67052,"line_start":190,"line_end":190,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67760,"byte_end":67770,"line_start":215,"line_end":215,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":68034,"byte_end":68044,"line_start":227,"line_end":227,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69011,"byte_end":69021,"line_start":265,"line_end":265,"column_start":54,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":625},{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69564,"byte_end":69574,"line_start":286,"line_end":286,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69706,"byte_end":69716,"line_start":293,"line_end":293,"column_start":48,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69774,"byte_end":69780,"line_start":295,"line_end":295,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71006,"byte_end":71016,"line_start":26,"line_end":26,"column_start":50,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73215,"byte_end":73225,"line_start":93,"line_end":93,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":74400,"byte_end":74417,"line_start":130,"line_end":130,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77037,"byte_end":77052,"line_start":201,"line_end":201,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77590,"byte_end":77598,"line_start":222,"line_end":222,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":82551,"byte_end":82564,"line_start":368,"line_end":368,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85936,"byte_end":85951,"line_start":461,"line_end":461,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":87151,"byte_end":87157,"line_start":494,"line_end":494,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":87335,"byte_end":87349,"line_start":501,"line_end":501,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":87550,"byte_end":87556,"line_start":508,"line_end":508,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90393,"byte_end":90399,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90512,"byte_end":90518,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":92318,"byte_end":92324,"line_start":88,"line_end":88,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":795},{"krate":0,"index":796}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable_writer.rs","byte_start":93342,"byte_end":93354,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3356,"byte_end":3361,"line_start":27,"line_end":27,"column_start":43,"column_end":48},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":9401}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":3696,"byte_end":3701,"line_start":39,"line_end":39,"column_start":33,"column_end":38},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4109,"byte_end":4114,"line_start":59,"line_end":59,"column_start":46,"column_end":51},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4505,"byte_end":4510,"line_start":73,"line_end":73,"column_start":73,"column_end":78},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":2919}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":4838,"byte_end":4843,"line_start":83,"line_end":83,"column_start":61,"column_end":66},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":906},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\array.rs","byte_start":5594,"byte_end":5599,"line_start":110,"line_end":110,"column_start":63,"column_end":68},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":906},"to":{"krate":2,"index":7473}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":8063,"byte_end":8080,"line_start":62,"line_end":62,"column_start":12,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\builder.rs","byte_start":34978,"byte_end":34995,"line_start":784,"line_end":784,"column_start":24,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":940},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36288,"byte_end":36293,"line_start":30,"line_end":30,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3021},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36296,"byte_end":36305,"line_start":30,"line_end":30,"column_start":33,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2667},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36308,"byte_end":36312,"line_start":30,"line_end":30,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":3026},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\endian_scalar.rs","byte_start":36315,"byte_end":36320,"line_start":30,"line_end":30,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":2637},"to":{"krate":0,"index":217}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42295,"byte_end":42306,"line_start":39,"line_end":39,"column_start":30,"column_end":41},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\follow.rs","byte_start":42554,"byte_end":42565,"line_start":49,"line_end":49,"column_start":40,"column_end":51},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":996},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49963,"byte_end":49972,"line_start":88,"line_end":88,"column_start":18,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1022},"to":{"krate":2,"index":3026}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":49997,"byte_end":50006,"line_start":89,"line_end":89,"column_start":19,"column_end":28},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1022},"to":{"krate":2,"index":2637}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50102,"byte_end":50111,"line_start":96,"line_end":96,"column_start":16,"column_end":25},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1022},"to":{"krate":2,"index":2672}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50141,"byte_end":50150,"line_start":98,"line_end":98,"column_start":23,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1022},"to":{"krate":2,"index":2667}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50262,"byte_end":50271,"line_start":104,"line_end":104,"column_start":19,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1022},"to":{"krate":2,"index":3227}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50394,"byte_end":50403,"line_start":111,"line_end":111,"column_start":17,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1022},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":50946,"byte_end":50955,"line_start":134,"line_end":134,"column_start":18,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1022},"to":{"krate":0,"index":460}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51254,"byte_end":51269,"line_start":146,"line_end":146,"column_start":18,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1030},"to":{"krate":0,"index":460}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51881,"byte_end":51896,"line_start":164,"line_end":164,"column_start":18,"column_end":33},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":3026}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":51921,"byte_end":51936,"line_start":165,"line_end":165,"column_start":19,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1030},"to":{"krate":2,"index":2637}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52025,"byte_end":52040,"line_start":172,"line_end":172,"column_start":9,"column_end":24},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1030},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52168,"byte_end":52183,"line_start":179,"line_end":179,"column_start":40,"column_end":55},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1030},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52669,"byte_end":52684,"line_start":193,"line_end":193,"column_start":9,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":52813,"byte_end":52828,"line_start":200,"line_end":200,"column_start":40,"column_end":55},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1038},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53122,"byte_end":53137,"line_start":210,"line_end":210,"column_start":18,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1038},"to":{"krate":0,"index":460}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53512,"byte_end":53528,"line_start":223,"line_end":223,"column_start":9,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1046},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53657,"byte_end":53673,"line_start":230,"line_end":230,"column_start":40,"column_end":56},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1046},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":53981,"byte_end":53997,"line_start":240,"line_end":240,"column_start":18,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1046},"to":{"krate":0,"index":460}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54388,"byte_end":54402,"line_start":252,"line_end":252,"column_start":45,"column_end":59},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":408},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":54819,"byte_end":54833,"line_start":263,"line_end":263,"column_start":45,"column_end":59},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":417},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55205,"byte_end":55219,"line_start":274,"line_end":274,"column_start":25,"column_end":39},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":426},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\primitives.rs","byte_start":55651,"byte_end":55669,"line_start":286,"line_end":286,"column_start":45,"column_end":63},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":432},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":57848,"byte_end":57853,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3021},"to":{"krate":0,"index":460}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\push.rs","byte_start":58299,"byte_end":58312,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":465},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60173,"byte_end":60178,"line_start":27,"line_end":27,"column_start":10,"column_end":15},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\table.rs","byte_start":60773,"byte_end":60778,"line_start":50,"line_end":50,"column_start":25,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1127},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":62401,"byte_end":62407,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":535},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":62724,"byte_end":62730,"line_start":44,"line_end":44,"column_start":23,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":535},"to":{"krate":2,"index":9401}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63150,"byte_end":63156,"line_start":57,"line_end":57,"column_start":22,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":535},"to":{"krate":2,"index":3026}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63189,"byte_end":63195,"line_start":58,"line_end":58,"column_start":23,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":535},"to":{"krate":2,"index":2637}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63274,"byte_end":63280,"line_start":64,"line_end":64,"column_start":17,"column_end":23},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":63720,"byte_end":63726,"line_start":84,"line_end":84,"column_start":30,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":64175,"byte_end":64181,"line_start":100,"line_end":100,"column_start":35,"column_end":41},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":535},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":66707,"byte_end":66713,"line_start":174,"line_end":174,"column_start":45,"column_end":51},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":535},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67042,"byte_end":67052,"line_start":190,"line_end":190,"column_start":17,"column_end":27},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":67760,"byte_end":67770,"line_start":215,"line_end":215,"column_start":40,"column_end":50},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":2637}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":68034,"byte_end":68044,"line_start":227,"line_end":227,"column_start":43,"column_end":53},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":7653}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69011,"byte_end":69021,"line_start":265,"line_end":265,"column_start":54,"column_end":64},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":7517}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69564,"byte_end":69574,"line_start":286,"line_end":286,"column_start":52,"column_end":62},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":7542}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69706,"byte_end":69716,"line_start":293,"line_end":293,"column_start":48,"column_end":58},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":7921}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vector.rs","byte_start":69774,"byte_end":69780,"line_start":295,"line_end":295,"column_start":47,"column_end":53},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":535},"to":{"krate":2,"index":7473}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":71006,"byte_end":71016,"line_start":26,"line_end":26,"column_start":50,"column_end":60},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1177},"to":{"krate":2,"index":2913}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":73215,"byte_end":73225,"line_start":93,"line_end":93,"column_start":28,"column_end":38},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1177},"to":{"krate":2,"index":9408}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":74400,"byte_end":74417,"line_start":130,"line_end":130,"column_start":6,"column_end":23},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77037,"byte_end":77052,"line_start":201,"line_end":201,"column_start":18,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1250},"to":{"krate":2,"index":2994}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":77590,"byte_end":77598,"line_start":222,"line_end":222,"column_start":19,"column_end":27},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":82551,"byte_end":82564,"line_start":368,"line_end":368,"column_start":25,"column_end":38},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":85936,"byte_end":85951,"line_start":461,"line_end":461,"column_start":36,"column_end":51},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1030},"to":{"krate":0,"index":738}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":87151,"byte_end":87157,"line_start":494,"line_end":494,"column_start":47,"column_end":53},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":535},"to":{"krate":0,"index":738}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":87335,"byte_end":87349,"line_start":501,"line_end":501,"column_start":36,"column_end":50},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":408},"to":{"krate":0,"index":738}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\verifier.rs","byte_start":87550,"byte_end":87556,"line_start":508,"line_end":508,"column_start":36,"column_end":42},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":535},"to":{"krate":0,"index":738}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90393,"byte_end":90399,"line_start":29,"line_end":29,"column_start":24,"column_end":30},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1322},"to":{"krate":2,"index":2667}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":90512,"byte_end":90518,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1322},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable.rs","byte_start":92318,"byte_end":92324,"line_start":88,"line_end":88,"column_start":25,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1322},"to":{"krate":0,"index":240}},{"span":{"file_name":"C:\\Users\\Tucker\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\flatbuffers-2.0.0\\src\\vtable_writer.rs","byte_start":93342,"byte_end":93354,"line_start":28,"line_end":28,"column_start":10,"column_end":22},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1329},"to":{"krate":4294967295,"index":4294967295}}]}